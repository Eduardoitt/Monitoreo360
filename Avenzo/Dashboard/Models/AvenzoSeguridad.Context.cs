//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dashboard.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AvenzoSeguridadEntities : DbContext
    {
        public AvenzoSeguridadEntities()
            : base("name=AvenzoSeguridadEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Empleados> Empleados { get; set; }
        public virtual DbSet<Usuarios> Usuarios { get; set; }
        public virtual DbSet<Bancos> Bancos { get; set; }
        public virtual DbSet<MetodosDePago> MetodosDePago { get; set; }        
        public virtual DbSet<PAC> PAC { get; set; }
        public virtual DbSet<Regimen> Regimen { get; set; }
        public virtual DbSet<RegimenFiscal> RegimenFiscal { get; set; }        
        public virtual DbSet<Estados> Estados { get; set; }
        public virtual DbSet<Catalogos> Catalogos { get; set; }
        public virtual DbSet<Ciudad> Ciudad { get; set; }
        public virtual DbSet<Pais> Pais { get; set; }
        public virtual DbSet<Clientes> Clientes { get; set; }
    
        
    
       
    
        
    
        public virtual ObjectResult<GetBancos_Result> GetBancos(string filtro)
        {
            var filtroParameter = filtro != null ?
                new ObjectParameter("Filtro", filtro) :
                new ObjectParameter("Filtro", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBancos_Result>("GetBancos", filtroParameter);
        }
        public virtual ObjectResult<GetPAC_Result> GetPAC(Nullable<System.Guid> id, Nullable<int> opcion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPAC_Result>("GetPAC", idParameter, opcionParameter);
        }
    
        public virtual int InsertPAC(Nullable<System.Guid> id, string rFC, string usuario, string contrasena, string contrasenaLlave, string nombre, string cURP, Nullable<bool> personaMoral, byte[] llave, string regimenFiscal, string registroPatronal, string rfcPatronOrigen, byte[] certificado, Nullable<System.DateTime> vigenciaInicio, Nullable<System.DateTime> vigenciaFinal, string usuarioCreacion, Nullable<System.DateTime> fechaCreacion, byte[] logo, Nullable<bool> activo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var rFCParameter = rFC != null ?
                new ObjectParameter("RFC", rFC) :
                new ObjectParameter("RFC", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            var contrasenaLlaveParameter = contrasenaLlave != null ?
                new ObjectParameter("ContrasenaLlave", contrasenaLlave) :
                new ObjectParameter("ContrasenaLlave", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var cURPParameter = cURP != null ?
                new ObjectParameter("CURP", cURP) :
                new ObjectParameter("CURP", typeof(string));
    
            var personaMoralParameter = personaMoral.HasValue ?
                new ObjectParameter("PersonaMoral", personaMoral) :
                new ObjectParameter("PersonaMoral", typeof(bool));
    
            var llaveParameter = llave != null ?
                new ObjectParameter("Llave", llave) :
                new ObjectParameter("Llave", typeof(byte[]));
    
            var regimenFiscalParameter = regimenFiscal != null ?
                new ObjectParameter("RegimenFiscal", regimenFiscal) :
                new ObjectParameter("RegimenFiscal", typeof(string));
    
            var registroPatronalParameter = registroPatronal != null ?
                new ObjectParameter("RegistroPatronal", registroPatronal) :
                new ObjectParameter("RegistroPatronal", typeof(string));
    
            var rfcPatronOrigenParameter = rfcPatronOrigen != null ?
                new ObjectParameter("RfcPatronOrigen", rfcPatronOrigen) :
                new ObjectParameter("RfcPatronOrigen", typeof(string));
    
            var certificadoParameter = certificado != null ?
                new ObjectParameter("Certificado", certificado) :
                new ObjectParameter("Certificado", typeof(byte[]));
    
            var vigenciaInicioParameter = vigenciaInicio.HasValue ?
                new ObjectParameter("VigenciaInicio", vigenciaInicio) :
                new ObjectParameter("VigenciaInicio", typeof(System.DateTime));
    
            var vigenciaFinalParameter = vigenciaFinal.HasValue ?
                new ObjectParameter("VigenciaFinal", vigenciaFinal) :
                new ObjectParameter("VigenciaFinal", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion != null ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(string));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(byte[]));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPAC", idParameter, rFCParameter, usuarioParameter, contrasenaParameter, contrasenaLlaveParameter, nombreParameter, cURPParameter, personaMoralParameter, llaveParameter, regimenFiscalParameter, registroPatronalParameter, rfcPatronOrigenParameter, certificadoParameter, vigenciaInicioParameter, vigenciaFinalParameter, usuarioCreacionParameter, fechaCreacionParameter, logoParameter, activoParameter);
        }
    
        public virtual int UpdatePAC(Nullable<System.Guid> id, string rFC, string usuario, string contrasena, string contrasenaLlave, string nombre, string cURP, Nullable<bool> personaMoral, byte[] llave, string regimenFiscal, string registroPatronal, string rfcPatronOrigen, byte[] certificado, Nullable<System.DateTime> vigenciaInicio, Nullable<System.DateTime> vigenciaFinal, string usuarioCreacion, Nullable<System.DateTime> fechaCreacion, byte[] logo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var rFCParameter = rFC != null ?
                new ObjectParameter("RFC", rFC) :
                new ObjectParameter("RFC", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            var contrasenaLlaveParameter = contrasenaLlave != null ?
                new ObjectParameter("ContrasenaLlave", contrasenaLlave) :
                new ObjectParameter("ContrasenaLlave", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var cURPParameter = cURP != null ?
                new ObjectParameter("CURP", cURP) :
                new ObjectParameter("CURP", typeof(string));
    
            var personaMoralParameter = personaMoral.HasValue ?
                new ObjectParameter("PersonaMoral", personaMoral) :
                new ObjectParameter("PersonaMoral", typeof(bool));
    
            var llaveParameter = llave != null ?
                new ObjectParameter("Llave", llave) :
                new ObjectParameter("Llave", typeof(byte[]));
    
            var regimenFiscalParameter = regimenFiscal != null ?
                new ObjectParameter("RegimenFiscal", regimenFiscal) :
                new ObjectParameter("RegimenFiscal", typeof(string));
    
            var registroPatronalParameter = registroPatronal != null ?
                new ObjectParameter("RegistroPatronal", registroPatronal) :
                new ObjectParameter("RegistroPatronal", typeof(string));
    
            var rfcPatronOrigenParameter = rfcPatronOrigen != null ?
                new ObjectParameter("RfcPatronOrigen", rfcPatronOrigen) :
                new ObjectParameter("RfcPatronOrigen", typeof(string));
    
            var certificadoParameter = certificado != null ?
                new ObjectParameter("Certificado", certificado) :
                new ObjectParameter("Certificado", typeof(byte[]));
    
            var vigenciaInicioParameter = vigenciaInicio.HasValue ?
                new ObjectParameter("VigenciaInicio", vigenciaInicio) :
                new ObjectParameter("VigenciaInicio", typeof(System.DateTime));
    
            var vigenciaFinalParameter = vigenciaFinal.HasValue ?
                new ObjectParameter("VigenciaFinal", vigenciaFinal) :
                new ObjectParameter("VigenciaFinal", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion != null ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(string));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePAC", idParameter, rFCParameter, usuarioParameter, contrasenaParameter, contrasenaLlaveParameter, nombreParameter, cURPParameter, personaMoralParameter, llaveParameter, regimenFiscalParameter, registroPatronalParameter, rfcPatronOrigenParameter, certificadoParameter, vigenciaInicioParameter, vigenciaFinalParameter, usuarioCreacionParameter, fechaCreacionParameter, logoParameter);
        }
    
        public virtual int DeleteClientes_ALT(Nullable<System.Guid> idCliente)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteClientes_ALT", idClienteParameter);
        }
    
        public virtual int InsertCliente_ALT(Nullable<System.Guid> iDProveedor, string numAlarma, string palabraClave, string palabraClaveSilen, string nombres, string apellidoPaterno, string apellidoMaterno, string calle, string noInterior, string noExterior, string colonia, string codigoPostal, string telefono, string telTrabajo, string telCelular, string email, byte[] foto, string estado, string pais, string ciudad, string tipoAfilacion, string numeroPatrocinador, string fechaNacimiento, string lugarNacimiento, string sexo, string estadoCivil, string profesion, string curp, string rfc, string banco, string claveBancaria, string numeroCLABE, string beneficiario, Nullable<System.DateTime> fechaCreacion, string usuarioCreacion, Nullable<bool> activo, Nullable<System.Guid> usuario, Nullable<System.Guid> iD)
        {
            var iDProveedorParameter = iDProveedor.HasValue ?
                new ObjectParameter("IDProveedor", iDProveedor) :
                new ObjectParameter("IDProveedor", typeof(System.Guid));
    
            var numAlarmaParameter = numAlarma != null ?
                new ObjectParameter("numAlarma", numAlarma) :
                new ObjectParameter("numAlarma", typeof(string));
    
            var palabraClaveParameter = palabraClave != null ?
                new ObjectParameter("PalabraClave", palabraClave) :
                new ObjectParameter("PalabraClave", typeof(string));
    
            var palabraClaveSilenParameter = palabraClaveSilen != null ?
                new ObjectParameter("PalabraClaveSilen", palabraClaveSilen) :
                new ObjectParameter("PalabraClaveSilen", typeof(string));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("nombres", nombres) :
                new ObjectParameter("nombres", typeof(string));
    
            var apellidoPaternoParameter = apellidoPaterno != null ?
                new ObjectParameter("ApellidoPaterno", apellidoPaterno) :
                new ObjectParameter("ApellidoPaterno", typeof(string));
    
            var apellidoMaternoParameter = apellidoMaterno != null ?
                new ObjectParameter("ApellidoMaterno", apellidoMaterno) :
                new ObjectParameter("ApellidoMaterno", typeof(string));
    
            var calleParameter = calle != null ?
                new ObjectParameter("calle", calle) :
                new ObjectParameter("calle", typeof(string));
    
            var noInteriorParameter = noInterior != null ?
                new ObjectParameter("NoInterior", noInterior) :
                new ObjectParameter("NoInterior", typeof(string));
    
            var noExteriorParameter = noExterior != null ?
                new ObjectParameter("NoExterior", noExterior) :
                new ObjectParameter("NoExterior", typeof(string));
    
            var coloniaParameter = colonia != null ?
                new ObjectParameter("Colonia", colonia) :
                new ObjectParameter("Colonia", typeof(string));
    
            var codigoPostalParameter = codigoPostal != null ?
                new ObjectParameter("CodigoPostal", codigoPostal) :
                new ObjectParameter("CodigoPostal", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var telTrabajoParameter = telTrabajo != null ?
                new ObjectParameter("telTrabajo", telTrabajo) :
                new ObjectParameter("telTrabajo", typeof(string));
    
            var telCelularParameter = telCelular != null ?
                new ObjectParameter("telCelular", telCelular) :
                new ObjectParameter("telCelular", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var fotoParameter = foto != null ?
                new ObjectParameter("foto", foto) :
                new ObjectParameter("foto", typeof(byte[]));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            var paisParameter = pais != null ?
                new ObjectParameter("pais", pais) :
                new ObjectParameter("pais", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("ciudad", ciudad) :
                new ObjectParameter("ciudad", typeof(string));
    
            var tipoAfilacionParameter = tipoAfilacion != null ?
                new ObjectParameter("tipoAfilacion", tipoAfilacion) :
                new ObjectParameter("tipoAfilacion", typeof(string));
    
            var numeroPatrocinadorParameter = numeroPatrocinador != null ?
                new ObjectParameter("numeroPatrocinador", numeroPatrocinador) :
                new ObjectParameter("numeroPatrocinador", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento != null ?
                new ObjectParameter("fechaNacimiento", fechaNacimiento) :
                new ObjectParameter("fechaNacimiento", typeof(string));
    
            var lugarNacimientoParameter = lugarNacimiento != null ?
                new ObjectParameter("lugarNacimiento", lugarNacimiento) :
                new ObjectParameter("lugarNacimiento", typeof(string));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("sexo", sexo) :
                new ObjectParameter("sexo", typeof(string));
    
            var estadoCivilParameter = estadoCivil != null ?
                new ObjectParameter("estadoCivil", estadoCivil) :
                new ObjectParameter("estadoCivil", typeof(string));
    
            var profesionParameter = profesion != null ?
                new ObjectParameter("profesion", profesion) :
                new ObjectParameter("profesion", typeof(string));
    
            var curpParameter = curp != null ?
                new ObjectParameter("curp", curp) :
                new ObjectParameter("curp", typeof(string));
    
            var rfcParameter = rfc != null ?
                new ObjectParameter("rfc", rfc) :
                new ObjectParameter("rfc", typeof(string));
    
            var bancoParameter = banco != null ?
                new ObjectParameter("banco", banco) :
                new ObjectParameter("banco", typeof(string));
    
            var claveBancariaParameter = claveBancaria != null ?
                new ObjectParameter("ClaveBancaria", claveBancaria) :
                new ObjectParameter("ClaveBancaria", typeof(string));
    
            var numeroCLABEParameter = numeroCLABE != null ?
                new ObjectParameter("numeroCLABE", numeroCLABE) :
                new ObjectParameter("numeroCLABE", typeof(string));
    
            var beneficiarioParameter = beneficiario != null ?
                new ObjectParameter("beneficiario", beneficiario) :
                new ObjectParameter("beneficiario", typeof(string));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion != null ?
                new ObjectParameter("usuarioCreacion", usuarioCreacion) :
                new ObjectParameter("usuarioCreacion", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var usuarioParameter = usuario.HasValue ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(System.Guid));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCliente_ALT", iDProveedorParameter, numAlarmaParameter, palabraClaveParameter, palabraClaveSilenParameter, nombresParameter, apellidoPaternoParameter, apellidoMaternoParameter, calleParameter, noInteriorParameter, noExteriorParameter, coloniaParameter, codigoPostalParameter, telefonoParameter, telTrabajoParameter, telCelularParameter, emailParameter, fotoParameter, estadoParameter, paisParameter, ciudadParameter, tipoAfilacionParameter, numeroPatrocinadorParameter, fechaNacimientoParameter, lugarNacimientoParameter, sexoParameter, estadoCivilParameter, profesionParameter, curpParameter, rfcParameter, bancoParameter, claveBancariaParameter, numeroCLABEParameter, beneficiarioParameter, fechaCreacionParameter, usuarioCreacionParameter, activoParameter, usuarioParameter, iDParameter);
        }
    
        public virtual int UpdateCliente_ALT(Nullable<System.Guid> idCliente, Nullable<System.Guid> idProveedor, string numeroTelefonoAlarma, string palabraClave, string palabraClaveSilenciosa, string nombres, string apellidoPaterno, string apellidoMaterno, string calle, string noInterior, string noExterior, string colonia, string codigoPostal, string telefono, string telefonoTrabajo, string telefonoCelular, string email, byte[] foto, string estado, string pais, string ciudad, string tipoAfilacion, string numeroPatrocinador, string fechaNacimiento, string lugarNacimiento, string sexo, string estadoCivil, string profesion, string cURP, string rFC, string claveBancaria, string banco, string numeroCLABE, string beneficiario, Nullable<System.DateTime> fechaCreacion, string usuarioCreacion, Nullable<bool> activo, Nullable<System.Guid> usuario)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(System.Guid));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(System.Guid));
    
            var numeroTelefonoAlarmaParameter = numeroTelefonoAlarma != null ?
                new ObjectParameter("NumeroTelefonoAlarma", numeroTelefonoAlarma) :
                new ObjectParameter("NumeroTelefonoAlarma", typeof(string));
    
            var palabraClaveParameter = palabraClave != null ?
                new ObjectParameter("PalabraClave", palabraClave) :
                new ObjectParameter("PalabraClave", typeof(string));
    
            var palabraClaveSilenciosaParameter = palabraClaveSilenciosa != null ?
                new ObjectParameter("PalabraClaveSilenciosa", palabraClaveSilenciosa) :
                new ObjectParameter("PalabraClaveSilenciosa", typeof(string));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var apellidoPaternoParameter = apellidoPaterno != null ?
                new ObjectParameter("ApellidoPaterno", apellidoPaterno) :
                new ObjectParameter("ApellidoPaterno", typeof(string));
    
            var apellidoMaternoParameter = apellidoMaterno != null ?
                new ObjectParameter("ApellidoMaterno", apellidoMaterno) :
                new ObjectParameter("ApellidoMaterno", typeof(string));
    
            var calleParameter = calle != null ?
                new ObjectParameter("Calle", calle) :
                new ObjectParameter("Calle", typeof(string));
    
            var noInteriorParameter = noInterior != null ?
                new ObjectParameter("NoInterior", noInterior) :
                new ObjectParameter("NoInterior", typeof(string));
    
            var noExteriorParameter = noExterior != null ?
                new ObjectParameter("NoExterior", noExterior) :
                new ObjectParameter("NoExterior", typeof(string));
    
            var coloniaParameter = colonia != null ?
                new ObjectParameter("Colonia", colonia) :
                new ObjectParameter("Colonia", typeof(string));
    
            var codigoPostalParameter = codigoPostal != null ?
                new ObjectParameter("CodigoPostal", codigoPostal) :
                new ObjectParameter("CodigoPostal", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var telefonoTrabajoParameter = telefonoTrabajo != null ?
                new ObjectParameter("TelefonoTrabajo", telefonoTrabajo) :
                new ObjectParameter("TelefonoTrabajo", typeof(string));
    
            var telefonoCelularParameter = telefonoCelular != null ?
                new ObjectParameter("TelefonoCelular", telefonoCelular) :
                new ObjectParameter("TelefonoCelular", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var fotoParameter = foto != null ?
                new ObjectParameter("Foto", foto) :
                new ObjectParameter("Foto", typeof(byte[]));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var paisParameter = pais != null ?
                new ObjectParameter("Pais", pais) :
                new ObjectParameter("Pais", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("Ciudad", ciudad) :
                new ObjectParameter("Ciudad", typeof(string));
    
            var tipoAfilacionParameter = tipoAfilacion != null ?
                new ObjectParameter("TipoAfilacion", tipoAfilacion) :
                new ObjectParameter("TipoAfilacion", typeof(string));
    
            var numeroPatrocinadorParameter = numeroPatrocinador != null ?
                new ObjectParameter("NumeroPatrocinador", numeroPatrocinador) :
                new ObjectParameter("NumeroPatrocinador", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento != null ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(string));
    
            var lugarNacimientoParameter = lugarNacimiento != null ?
                new ObjectParameter("LugarNacimiento", lugarNacimiento) :
                new ObjectParameter("LugarNacimiento", typeof(string));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("Sexo", sexo) :
                new ObjectParameter("Sexo", typeof(string));
    
            var estadoCivilParameter = estadoCivil != null ?
                new ObjectParameter("EstadoCivil", estadoCivil) :
                new ObjectParameter("EstadoCivil", typeof(string));
    
            var profesionParameter = profesion != null ?
                new ObjectParameter("Profesion", profesion) :
                new ObjectParameter("Profesion", typeof(string));
    
            var cURPParameter = cURP != null ?
                new ObjectParameter("CURP", cURP) :
                new ObjectParameter("CURP", typeof(string));
    
            var rFCParameter = rFC != null ?
                new ObjectParameter("RFC", rFC) :
                new ObjectParameter("RFC", typeof(string));
    
            var claveBancariaParameter = claveBancaria != null ?
                new ObjectParameter("ClaveBancaria", claveBancaria) :
                new ObjectParameter("ClaveBancaria", typeof(string));
    
            var bancoParameter = banco != null ?
                new ObjectParameter("Banco", banco) :
                new ObjectParameter("Banco", typeof(string));
    
            var numeroCLABEParameter = numeroCLABE != null ?
                new ObjectParameter("NumeroCLABE", numeroCLABE) :
                new ObjectParameter("NumeroCLABE", typeof(string));
    
            var beneficiarioParameter = beneficiario != null ?
                new ObjectParameter("Beneficiario", beneficiario) :
                new ObjectParameter("Beneficiario", typeof(string));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion != null ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var usuarioParameter = usuario.HasValue ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCliente_ALT", idClienteParameter, idProveedorParameter, numeroTelefonoAlarmaParameter, palabraClaveParameter, palabraClaveSilenciosaParameter, nombresParameter, apellidoPaternoParameter, apellidoMaternoParameter, calleParameter, noInteriorParameter, noExteriorParameter, coloniaParameter, codigoPostalParameter, telefonoParameter, telefonoTrabajoParameter, telefonoCelularParameter, emailParameter, fotoParameter, estadoParameter, paisParameter, ciudadParameter, tipoAfilacionParameter, numeroPatrocinadorParameter, fechaNacimientoParameter, lugarNacimientoParameter, sexoParameter, estadoCivilParameter, profesionParameter, cURPParameter, rFCParameter, claveBancariaParameter, bancoParameter, numeroCLABEParameter, beneficiarioParameter, fechaCreacionParameter, usuarioCreacionParameter, activoParameter, usuarioParameter);
        }
    
        public virtual int DeleteMonitoreoIngresos(Nullable<System.Guid> idIngreso, Nullable<int> option)
        {
            var idIngresoParameter = idIngreso.HasValue ?
                new ObjectParameter("IdIngreso", idIngreso) :
                new ObjectParameter("IdIngreso", typeof(System.Guid));
    
            var optionParameter = option.HasValue ?
                new ObjectParameter("Option", option) :
                new ObjectParameter("Option", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMonitoreoIngresos", idIngresoParameter, optionParameter);
        }
    
        public virtual int UpdateMonitoreoIngresos(Nullable<int> folio, Nullable<System.Guid> idIngreso, byte[] facturaXML, byte[] facturaPDF, Nullable<double> cargos, Nullable<double> abonos, Nullable<double> tipoCambio, Nullable<double> cargosUSD, Nullable<double> abonosUSD, string metodoDePago, Nullable<int> cantidad, string unidad, string concepto, string descripcion, Nullable<bool> revisoRoboT, Nullable<System.Guid> mismaFactura, Nullable<bool> requiereFactura, Nullable<bool> requiereCancelacion)
        {
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var idIngresoParameter = idIngreso.HasValue ?
                new ObjectParameter("IdIngreso", idIngreso) :
                new ObjectParameter("IdIngreso", typeof(System.Guid));
    
            var facturaXMLParameter = facturaXML != null ?
                new ObjectParameter("FacturaXML", facturaXML) :
                new ObjectParameter("FacturaXML", typeof(byte[]));
    
            var facturaPDFParameter = facturaPDF != null ?
                new ObjectParameter("FacturaPDF", facturaPDF) :
                new ObjectParameter("FacturaPDF", typeof(byte[]));
    
            var cargosParameter = cargos.HasValue ?
                new ObjectParameter("Cargos", cargos) :
                new ObjectParameter("Cargos", typeof(double));
    
            var abonosParameter = abonos.HasValue ?
                new ObjectParameter("Abonos", abonos) :
                new ObjectParameter("Abonos", typeof(double));
    
            var tipoCambioParameter = tipoCambio.HasValue ?
                new ObjectParameter("TipoCambio", tipoCambio) :
                new ObjectParameter("TipoCambio", typeof(double));
    
            var cargosUSDParameter = cargosUSD.HasValue ?
                new ObjectParameter("CargosUSD", cargosUSD) :
                new ObjectParameter("CargosUSD", typeof(double));
    
            var abonosUSDParameter = abonosUSD.HasValue ?
                new ObjectParameter("AbonosUSD", abonosUSD) :
                new ObjectParameter("AbonosUSD", typeof(double));
    
            var metodoDePagoParameter = metodoDePago != null ?
                new ObjectParameter("MetodoDePago", metodoDePago) :
                new ObjectParameter("MetodoDePago", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var unidadParameter = unidad != null ?
                new ObjectParameter("Unidad", unidad) :
                new ObjectParameter("Unidad", typeof(string));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("Concepto", concepto) :
                new ObjectParameter("Concepto", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var revisoRoboTParameter = revisoRoboT.HasValue ?
                new ObjectParameter("RevisoRoboT", revisoRoboT) :
                new ObjectParameter("RevisoRoboT", typeof(bool));
    
            var mismaFacturaParameter = mismaFactura.HasValue ?
                new ObjectParameter("MismaFactura", mismaFactura) :
                new ObjectParameter("MismaFactura", typeof(System.Guid));
    
            var requiereFacturaParameter = requiereFactura.HasValue ?
                new ObjectParameter("RequiereFactura", requiereFactura) :
                new ObjectParameter("RequiereFactura", typeof(bool));
    
            var requiereCancelacionParameter = requiereCancelacion.HasValue ?
                new ObjectParameter("RequiereCancelacion", requiereCancelacion) :
                new ObjectParameter("RequiereCancelacion", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMonitoreoIngresos", folioParameter, idIngresoParameter, facturaXMLParameter, facturaPDFParameter, cargosParameter, abonosParameter, tipoCambioParameter, cargosUSDParameter, abonosUSDParameter, metodoDePagoParameter, cantidadParameter, unidadParameter, conceptoParameter, descripcionParameter, revisoRoboTParameter, mismaFacturaParameter, requiereFacturaParameter, requiereCancelacionParameter);
        }
    
        public virtual int InsertIngresos(Nullable<System.Guid> idIngresos, Nullable<System.Guid> idCliente, Nullable<System.Guid> idProveedor, Nullable<System.DateTime> fecha, Nullable<double> cargos, Nullable<double> abonos, Nullable<double> cargosUSD, Nullable<double> abonosUSD, string metodoDePago, string concepto, string descripcion, Nullable<bool> revisoRoboT, Nullable<int> folio, Nullable<System.Guid> mismaFactura, Nullable<bool> requiereFactura, string usuario, byte[] facturaPDF, byte[] facturaXML, Nullable<double> tipoCambio, string unidad, Nullable<int> cantidad, Nullable<System.Guid> idDispositivo, string moneda)
        {
            var idIngresosParameter = idIngresos.HasValue ?
                new ObjectParameter("idIngresos", idIngresos) :
                new ObjectParameter("idIngresos", typeof(System.Guid));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(System.Guid));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(System.Guid));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var cargosParameter = cargos.HasValue ?
                new ObjectParameter("Cargos", cargos) :
                new ObjectParameter("Cargos", typeof(double));
    
            var abonosParameter = abonos.HasValue ?
                new ObjectParameter("Abonos", abonos) :
                new ObjectParameter("Abonos", typeof(double));
    
            var cargosUSDParameter = cargosUSD.HasValue ?
                new ObjectParameter("CargosUSD", cargosUSD) :
                new ObjectParameter("CargosUSD", typeof(double));
    
            var abonosUSDParameter = abonosUSD.HasValue ?
                new ObjectParameter("AbonosUSD", abonosUSD) :
                new ObjectParameter("AbonosUSD", typeof(double));
    
            var metodoDePagoParameter = metodoDePago != null ?
                new ObjectParameter("MetodoDePago", metodoDePago) :
                new ObjectParameter("MetodoDePago", typeof(string));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("Concepto", concepto) :
                new ObjectParameter("Concepto", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var revisoRoboTParameter = revisoRoboT.HasValue ?
                new ObjectParameter("RevisoRoboT", revisoRoboT) :
                new ObjectParameter("RevisoRoboT", typeof(bool));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var mismaFacturaParameter = mismaFactura.HasValue ?
                new ObjectParameter("MismaFactura", mismaFactura) :
                new ObjectParameter("MismaFactura", typeof(System.Guid));
    
            var requiereFacturaParameter = requiereFactura.HasValue ?
                new ObjectParameter("RequiereFactura", requiereFactura) :
                new ObjectParameter("RequiereFactura", typeof(bool));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var facturaPDFParameter = facturaPDF != null ?
                new ObjectParameter("FacturaPDF", facturaPDF) :
                new ObjectParameter("FacturaPDF", typeof(byte[]));
    
            var facturaXMLParameter = facturaXML != null ?
                new ObjectParameter("FacturaXML", facturaXML) :
                new ObjectParameter("FacturaXML", typeof(byte[]));
    
            var tipoCambioParameter = tipoCambio.HasValue ?
                new ObjectParameter("TipoCambio", tipoCambio) :
                new ObjectParameter("TipoCambio", typeof(double));
    
            var unidadParameter = unidad != null ?
                new ObjectParameter("Unidad", unidad) :
                new ObjectParameter("Unidad", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var idDispositivoParameter = idDispositivo.HasValue ?
                new ObjectParameter("IdDispositivo", idDispositivo) :
                new ObjectParameter("IdDispositivo", typeof(System.Guid));
    
            var monedaParameter = moneda != null ?
                new ObjectParameter("Moneda", moneda) :
                new ObjectParameter("Moneda", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertIngresos", idIngresosParameter, idClienteParameter, idProveedorParameter, fechaParameter, cargosParameter, abonosParameter, cargosUSDParameter, abonosUSDParameter, metodoDePagoParameter, conceptoParameter, descripcionParameter, revisoRoboTParameter, folioParameter, mismaFacturaParameter, requiereFacturaParameter, usuarioParameter, facturaPDFParameter, facturaXMLParameter, tipoCambioParameter, unidadParameter, cantidadParameter, idDispositivoParameter, monedaParameter);
        }
    
        public virtual int DeletePAC(Nullable<System.Guid> id, Nullable<int> opcion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePAC", idParameter, opcionParameter);
        }    
        
    }
}
