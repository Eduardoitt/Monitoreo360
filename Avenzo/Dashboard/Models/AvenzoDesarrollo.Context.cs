//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dashboard.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AvenzoSeguridad2Entities : DbContext
    {
        public AvenzoSeguridad2Entities()
            : base("name=AvenzoSeguridad2Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Bancos> Bancos { get; set; }
        public virtual DbSet<Contratos> Contratos { get; set; }
        public virtual DbSet<Deducciones> Deducciones { get; set; }
        public virtual DbSet<Horas> Horas { get; set; }
        public virtual DbSet<Incapacidades> Incapacidades { get; set; }
        public virtual DbSet<Jornadas> Jornadas { get; set; }
        public virtual DbSet<PAC> PAC { get; set; }
        public virtual DbSet<Percepciones> Percepciones { get; set; }
        public virtual DbSet<PeriodicidadPago> PeriodicidadPago { get; set; }
        public virtual DbSet<Regimen> Regimen { get; set; }
        public virtual DbSet<RegimenFiscal> RegimenFiscal { get; set; }
        public virtual DbSet<RiesgoPuesto> RiesgoPuesto { get; set; }
        public virtual DbSet<UsoCFDI> UsoCFDI { get; set; }
        public virtual DbSet<CFDI> CFDI { get; set; }
        public virtual DbSet<Clientes> Clientes { get; set; }
        public virtual DbSet<Empleados> Empleados { get; set; }
        public virtual DbSet<NominaDeduccion> NominaDeduccion { get; set; }
        public virtual DbSet<NominaHistorial> NominaHistorial { get; set; }
        public virtual DbSet<NominaHorasExtras> NominaHorasExtras { get; set; }
        public virtual DbSet<NominaPercepciones> NominaPercepciones { get; set; }
        public virtual DbSet<Usuarios> Usuarios { get; set; }
        public virtual DbSet<Pais> Pais { get; set; }
        public virtual DbSet<ClaveProdServ> ClaveProdServ { get; set; }
        public virtual DbSet<Estados> Estados { get; set; }
        public virtual DbSet<OtrosPagos> OtrosPagos { get; set; }
        public virtual DbSet<Catalogos> Catalogos { get; set; }
        public virtual DbSet<CFDIPorOperacion> CFDIPorOperacion { get; set; }
        public virtual DbSet<MonitoreoIngresos> MonitoreoIngresos { get; set; }
        public virtual DbSet<MetodosDePago> MetodosDePago { get; set; }
        public virtual DbSet<Ciudad> Ciudad { get; set; }
        public virtual DbSet<AdeudosInstalaciones> AdeudosInstalaciones { get; set; }
    
        public virtual int DeletePAC(Nullable<System.Guid> id, Nullable<int> opcion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePAC", idParameter, opcionParameter);
        }
    
        public virtual int UpdatePAC(Nullable<System.Guid> id, string rFC, string usuario, string contrasena, string nombre, string cURP, Nullable<bool> personaMoral, byte[] llave, byte[] certificado, string contrasenaLlave, string regimenFiscal, string registroPatronal, string rfcPatronOrigen, byte[] logo, string lugarExpedicion, Nullable<System.DateTime> vigenciaInicio, Nullable<System.DateTime> vigenciaFinal, Nullable<bool> activo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var rFCParameter = rFC != null ?
                new ObjectParameter("RFC", rFC) :
                new ObjectParameter("RFC", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var cURPParameter = cURP != null ?
                new ObjectParameter("CURP", cURP) :
                new ObjectParameter("CURP", typeof(string));
    
            var personaMoralParameter = personaMoral.HasValue ?
                new ObjectParameter("PersonaMoral", personaMoral) :
                new ObjectParameter("PersonaMoral", typeof(bool));
    
            var llaveParameter = llave != null ?
                new ObjectParameter("Llave", llave) :
                new ObjectParameter("Llave", typeof(byte[]));
    
            var certificadoParameter = certificado != null ?
                new ObjectParameter("Certificado", certificado) :
                new ObjectParameter("Certificado", typeof(byte[]));
    
            var contrasenaLlaveParameter = contrasenaLlave != null ?
                new ObjectParameter("ContrasenaLlave", contrasenaLlave) :
                new ObjectParameter("ContrasenaLlave", typeof(string));
    
            var regimenFiscalParameter = regimenFiscal != null ?
                new ObjectParameter("RegimenFiscal", regimenFiscal) :
                new ObjectParameter("RegimenFiscal", typeof(string));
    
            var registroPatronalParameter = registroPatronal != null ?
                new ObjectParameter("RegistroPatronal", registroPatronal) :
                new ObjectParameter("RegistroPatronal", typeof(string));
    
            var rfcPatronOrigenParameter = rfcPatronOrigen != null ?
                new ObjectParameter("RfcPatronOrigen", rfcPatronOrigen) :
                new ObjectParameter("RfcPatronOrigen", typeof(string));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(byte[]));
    
            var lugarExpedicionParameter = lugarExpedicion != null ?
                new ObjectParameter("LugarExpedicion", lugarExpedicion) :
                new ObjectParameter("LugarExpedicion", typeof(string));
    
            var vigenciaInicioParameter = vigenciaInicio.HasValue ?
                new ObjectParameter("VigenciaInicio", vigenciaInicio) :
                new ObjectParameter("VigenciaInicio", typeof(System.DateTime));
    
            var vigenciaFinalParameter = vigenciaFinal.HasValue ?
                new ObjectParameter("VigenciaFinal", vigenciaFinal) :
                new ObjectParameter("VigenciaFinal", typeof(System.DateTime));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePAC", idParameter, rFCParameter, usuarioParameter, contrasenaParameter, nombreParameter, cURPParameter, personaMoralParameter, llaveParameter, certificadoParameter, contrasenaLlaveParameter, regimenFiscalParameter, registroPatronalParameter, rfcPatronOrigenParameter, logoParameter, lugarExpedicionParameter, vigenciaInicioParameter, vigenciaFinalParameter, activoParameter);
        }
    
        public virtual int DeleteClientes(Nullable<System.Guid> id, Nullable<int> opcion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteClientes", idParameter, opcionParameter);
        }
    
        public virtual int deleteEmpleado(Nullable<int> op, Nullable<int> iD)
        {
            var opParameter = op.HasValue ?
                new ObjectParameter("op", op) :
                new ObjectParameter("op", typeof(int));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteEmpleado", opParameter, iDParameter);
        }
    
        public virtual int DeleteMonitoreoIngresos(Nullable<System.Guid> idIngreso, Nullable<int> option)
        {
            var idIngresoParameter = idIngreso.HasValue ?
                new ObjectParameter("IdIngreso", idIngreso) :
                new ObjectParameter("IdIngreso", typeof(System.Guid));
    
            var optionParameter = option.HasValue ?
                new ObjectParameter("Option", option) :
                new ObjectParameter("Option", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMonitoreoIngresos", idIngresoParameter, optionParameter);
        }
    
        public virtual int DeleteNominaHistorial(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteNominaHistorial", idParameter);
        }
    
        public virtual int InsertCFDI(Nullable<System.Guid> id, string tipo, Nullable<int> folio, byte[] xML, string ruta, Nullable<System.Guid> idCliente, Nullable<System.Guid> idEmpleado, Nullable<System.Guid> idProveedor, Nullable<bool> cancelado, Nullable<System.DateTime> fechaCreacion, string usuarioCreacion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var xMLParameter = xML != null ?
                new ObjectParameter("XML", xML) :
                new ObjectParameter("XML", typeof(byte[]));
    
            var rutaParameter = ruta != null ?
                new ObjectParameter("Ruta", ruta) :
                new ObjectParameter("Ruta", typeof(string));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(System.Guid));
    
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("IdEmpleado", idEmpleado) :
                new ObjectParameter("IdEmpleado", typeof(System.Guid));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(System.Guid));
    
            var canceladoParameter = cancelado.HasValue ?
                new ObjectParameter("Cancelado", cancelado) :
                new ObjectParameter("Cancelado", typeof(bool));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion != null ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCFDI", idParameter, tipoParameter, folioParameter, xMLParameter, rutaParameter, idClienteParameter, idEmpleadoParameter, idProveedorParameter, canceladoParameter, fechaCreacionParameter, usuarioCreacionParameter);
        }
    
        public virtual int InsertClientes(Nullable<System.Guid> id, Nullable<System.Guid> idProveedor, Nullable<System.Guid> idUsuario, string numAlarma, string nombres, string apellidoPaterno, string apellidoMaterno, string numeroDeCuenta, string palabraClave, string palabraClaveSilen, string calle, string noInterior, string noExterior, string colonia, string codigoPostal, string telefono, string telTrabajo, string telCelular, string email, byte[] foto, string estado, string pais, string ciudad, Nullable<System.Guid> tipoAfilacion, string numeroPatrocinador, string fechaNacimiento, string lugarNacimiento, string sexo, string estadoCivil, string profesion, string curp, string rfc, string banco, string numCtaPago, string claveBancaria, string numeroCLABE, string beneficiario, Nullable<System.DateTime> fechaCreacion, string usuarioCreacion, Nullable<bool> activo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(System.Guid));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(System.Guid));
    
            var numAlarmaParameter = numAlarma != null ?
                new ObjectParameter("numAlarma", numAlarma) :
                new ObjectParameter("numAlarma", typeof(string));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("nombres", nombres) :
                new ObjectParameter("nombres", typeof(string));
    
            var apellidoPaternoParameter = apellidoPaterno != null ?
                new ObjectParameter("ApellidoPaterno", apellidoPaterno) :
                new ObjectParameter("ApellidoPaterno", typeof(string));
    
            var apellidoMaternoParameter = apellidoMaterno != null ?
                new ObjectParameter("ApellidoMaterno", apellidoMaterno) :
                new ObjectParameter("ApellidoMaterno", typeof(string));
    
            var numeroDeCuentaParameter = numeroDeCuenta != null ?
                new ObjectParameter("NumeroDeCuenta", numeroDeCuenta) :
                new ObjectParameter("NumeroDeCuenta", typeof(string));
    
            var palabraClaveParameter = palabraClave != null ?
                new ObjectParameter("PalabraClave", palabraClave) :
                new ObjectParameter("PalabraClave", typeof(string));
    
            var palabraClaveSilenParameter = palabraClaveSilen != null ?
                new ObjectParameter("PalabraClaveSilen", palabraClaveSilen) :
                new ObjectParameter("PalabraClaveSilen", typeof(string));
    
            var calleParameter = calle != null ?
                new ObjectParameter("calle", calle) :
                new ObjectParameter("calle", typeof(string));
    
            var noInteriorParameter = noInterior != null ?
                new ObjectParameter("NoInterior", noInterior) :
                new ObjectParameter("NoInterior", typeof(string));
    
            var noExteriorParameter = noExterior != null ?
                new ObjectParameter("NoExterior", noExterior) :
                new ObjectParameter("NoExterior", typeof(string));
    
            var coloniaParameter = colonia != null ?
                new ObjectParameter("Colonia", colonia) :
                new ObjectParameter("Colonia", typeof(string));
    
            var codigoPostalParameter = codigoPostal != null ?
                new ObjectParameter("CodigoPostal", codigoPostal) :
                new ObjectParameter("CodigoPostal", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var telTrabajoParameter = telTrabajo != null ?
                new ObjectParameter("telTrabajo", telTrabajo) :
                new ObjectParameter("telTrabajo", typeof(string));
    
            var telCelularParameter = telCelular != null ?
                new ObjectParameter("telCelular", telCelular) :
                new ObjectParameter("telCelular", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var fotoParameter = foto != null ?
                new ObjectParameter("foto", foto) :
                new ObjectParameter("foto", typeof(byte[]));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            var paisParameter = pais != null ?
                new ObjectParameter("pais", pais) :
                new ObjectParameter("pais", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("ciudad", ciudad) :
                new ObjectParameter("ciudad", typeof(string));
    
            var tipoAfilacionParameter = tipoAfilacion.HasValue ?
                new ObjectParameter("tipoAfilacion", tipoAfilacion) :
                new ObjectParameter("tipoAfilacion", typeof(System.Guid));
    
            var numeroPatrocinadorParameter = numeroPatrocinador != null ?
                new ObjectParameter("numeroPatrocinador", numeroPatrocinador) :
                new ObjectParameter("numeroPatrocinador", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento != null ?
                new ObjectParameter("fechaNacimiento", fechaNacimiento) :
                new ObjectParameter("fechaNacimiento", typeof(string));
    
            var lugarNacimientoParameter = lugarNacimiento != null ?
                new ObjectParameter("lugarNacimiento", lugarNacimiento) :
                new ObjectParameter("lugarNacimiento", typeof(string));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("sexo", sexo) :
                new ObjectParameter("sexo", typeof(string));
    
            var estadoCivilParameter = estadoCivil != null ?
                new ObjectParameter("estadoCivil", estadoCivil) :
                new ObjectParameter("estadoCivil", typeof(string));
    
            var profesionParameter = profesion != null ?
                new ObjectParameter("profesion", profesion) :
                new ObjectParameter("profesion", typeof(string));
    
            var curpParameter = curp != null ?
                new ObjectParameter("curp", curp) :
                new ObjectParameter("curp", typeof(string));
    
            var rfcParameter = rfc != null ?
                new ObjectParameter("rfc", rfc) :
                new ObjectParameter("rfc", typeof(string));
    
            var bancoParameter = banco != null ?
                new ObjectParameter("banco", banco) :
                new ObjectParameter("banco", typeof(string));
    
            var numCtaPagoParameter = numCtaPago != null ?
                new ObjectParameter("NumCtaPago", numCtaPago) :
                new ObjectParameter("NumCtaPago", typeof(string));
    
            var claveBancariaParameter = claveBancaria != null ?
                new ObjectParameter("ClaveBancaria", claveBancaria) :
                new ObjectParameter("ClaveBancaria", typeof(string));
    
            var numeroCLABEParameter = numeroCLABE != null ?
                new ObjectParameter("numeroCLABE", numeroCLABE) :
                new ObjectParameter("numeroCLABE", typeof(string));
    
            var beneficiarioParameter = beneficiario != null ?
                new ObjectParameter("beneficiario", beneficiario) :
                new ObjectParameter("beneficiario", typeof(string));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion != null ?
                new ObjectParameter("usuarioCreacion", usuarioCreacion) :
                new ObjectParameter("usuarioCreacion", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertClientes", idParameter, idProveedorParameter, idUsuarioParameter, numAlarmaParameter, nombresParameter, apellidoPaternoParameter, apellidoMaternoParameter, numeroDeCuentaParameter, palabraClaveParameter, palabraClaveSilenParameter, calleParameter, noInteriorParameter, noExteriorParameter, coloniaParameter, codigoPostalParameter, telefonoParameter, telTrabajoParameter, telCelularParameter, emailParameter, fotoParameter, estadoParameter, paisParameter, ciudadParameter, tipoAfilacionParameter, numeroPatrocinadorParameter, fechaNacimientoParameter, lugarNacimientoParameter, sexoParameter, estadoCivilParameter, profesionParameter, curpParameter, rfcParameter, bancoParameter, numCtaPagoParameter, claveBancariaParameter, numeroCLABEParameter, beneficiarioParameter, fechaCreacionParameter, usuarioCreacionParameter, activoParameter);
        }
    
        public virtual int InsertEmpleado(Nullable<System.Guid> id, Nullable<System.Guid> idProveedor, string nombre, string apellidoMaterno, string apellidoPaterno, Nullable<System.Guid> idUsuario, string email, Nullable<System.DateTime> fechaNacimiento, Nullable<System.DateTime> fechaInicioRelLaboral, string rFC, string cURP, byte[] huellaDactilar, byte[] foto, string iNE, string numeroSeguridadSocial, string departamento, string direccion, string puesto, string riesgoPuesto, string tipoContrato, string tipoJornada, Nullable<double> salarioDiario, string banco, string cuentaBancaria, string claveEntFed, string gradoEstudios, string telefono, string telefonoEmergencia, byte[] firma, string tipoSangre, string cUIP, string numeroDeLicencia, string numeroDeAutorizacion, Nullable<bool> activo, string usuarioCreacion, Nullable<System.DateTime> fechaCreacion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(System.Guid));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoMaternoParameter = apellidoMaterno != null ?
                new ObjectParameter("ApellidoMaterno", apellidoMaterno) :
                new ObjectParameter("ApellidoMaterno", typeof(string));
    
            var apellidoPaternoParameter = apellidoPaterno != null ?
                new ObjectParameter("ApellidoPaterno", apellidoPaterno) :
                new ObjectParameter("ApellidoPaterno", typeof(string));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(System.Guid));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var fechaInicioRelLaboralParameter = fechaInicioRelLaboral.HasValue ?
                new ObjectParameter("FechaInicioRelLaboral", fechaInicioRelLaboral) :
                new ObjectParameter("FechaInicioRelLaboral", typeof(System.DateTime));
    
            var rFCParameter = rFC != null ?
                new ObjectParameter("RFC", rFC) :
                new ObjectParameter("RFC", typeof(string));
    
            var cURPParameter = cURP != null ?
                new ObjectParameter("CURP", cURP) :
                new ObjectParameter("CURP", typeof(string));
    
            var huellaDactilarParameter = huellaDactilar != null ?
                new ObjectParameter("HuellaDactilar", huellaDactilar) :
                new ObjectParameter("HuellaDactilar", typeof(byte[]));
    
            var fotoParameter = foto != null ?
                new ObjectParameter("Foto", foto) :
                new ObjectParameter("Foto", typeof(byte[]));
    
            var iNEParameter = iNE != null ?
                new ObjectParameter("INE", iNE) :
                new ObjectParameter("INE", typeof(string));
    
            var numeroSeguridadSocialParameter = numeroSeguridadSocial != null ?
                new ObjectParameter("NumeroSeguridadSocial", numeroSeguridadSocial) :
                new ObjectParameter("NumeroSeguridadSocial", typeof(string));
    
            var departamentoParameter = departamento != null ?
                new ObjectParameter("Departamento", departamento) :
                new ObjectParameter("Departamento", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var puestoParameter = puesto != null ?
                new ObjectParameter("Puesto", puesto) :
                new ObjectParameter("Puesto", typeof(string));
    
            var riesgoPuestoParameter = riesgoPuesto != null ?
                new ObjectParameter("RiesgoPuesto", riesgoPuesto) :
                new ObjectParameter("RiesgoPuesto", typeof(string));
    
            var tipoContratoParameter = tipoContrato != null ?
                new ObjectParameter("TipoContrato", tipoContrato) :
                new ObjectParameter("TipoContrato", typeof(string));
    
            var tipoJornadaParameter = tipoJornada != null ?
                new ObjectParameter("TipoJornada", tipoJornada) :
                new ObjectParameter("TipoJornada", typeof(string));
    
            var salarioDiarioParameter = salarioDiario.HasValue ?
                new ObjectParameter("SalarioDiario", salarioDiario) :
                new ObjectParameter("SalarioDiario", typeof(double));
    
            var bancoParameter = banco != null ?
                new ObjectParameter("Banco", banco) :
                new ObjectParameter("Banco", typeof(string));
    
            var cuentaBancariaParameter = cuentaBancaria != null ?
                new ObjectParameter("CuentaBancaria", cuentaBancaria) :
                new ObjectParameter("CuentaBancaria", typeof(string));
    
            var claveEntFedParameter = claveEntFed != null ?
                new ObjectParameter("ClaveEntFed", claveEntFed) :
                new ObjectParameter("ClaveEntFed", typeof(string));
    
            var gradoEstudiosParameter = gradoEstudios != null ?
                new ObjectParameter("GradoEstudios", gradoEstudios) :
                new ObjectParameter("GradoEstudios", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var telefonoEmergenciaParameter = telefonoEmergencia != null ?
                new ObjectParameter("TelefonoEmergencia", telefonoEmergencia) :
                new ObjectParameter("TelefonoEmergencia", typeof(string));
    
            var firmaParameter = firma != null ?
                new ObjectParameter("Firma", firma) :
                new ObjectParameter("Firma", typeof(byte[]));
    
            var tipoSangreParameter = tipoSangre != null ?
                new ObjectParameter("TipoSangre", tipoSangre) :
                new ObjectParameter("TipoSangre", typeof(string));
    
            var cUIPParameter = cUIP != null ?
                new ObjectParameter("CUIP", cUIP) :
                new ObjectParameter("CUIP", typeof(string));
    
            var numeroDeLicenciaParameter = numeroDeLicencia != null ?
                new ObjectParameter("NumeroDeLicencia", numeroDeLicencia) :
                new ObjectParameter("NumeroDeLicencia", typeof(string));
    
            var numeroDeAutorizacionParameter = numeroDeAutorizacion != null ?
                new ObjectParameter("NumeroDeAutorizacion", numeroDeAutorizacion) :
                new ObjectParameter("NumeroDeAutorizacion", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var usuarioCreacionParameter = usuarioCreacion != null ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(string));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertEmpleado", idParameter, idProveedorParameter, nombreParameter, apellidoMaternoParameter, apellidoPaternoParameter, idUsuarioParameter, emailParameter, fechaNacimientoParameter, fechaInicioRelLaboralParameter, rFCParameter, cURPParameter, huellaDactilarParameter, fotoParameter, iNEParameter, numeroSeguridadSocialParameter, departamentoParameter, direccionParameter, puestoParameter, riesgoPuestoParameter, tipoContratoParameter, tipoJornadaParameter, salarioDiarioParameter, bancoParameter, cuentaBancariaParameter, claveEntFedParameter, gradoEstudiosParameter, telefonoParameter, telefonoEmergenciaParameter, firmaParameter, tipoSangreParameter, cUIPParameter, numeroDeLicenciaParameter, numeroDeAutorizacionParameter, activoParameter, usuarioCreacionParameter, fechaCreacionParameter);
        }
    
        public virtual int InsertMonitoreoIngresos(Nullable<System.Guid> idIngresos, Nullable<System.Guid> idAdeudo, Nullable<System.Guid> idNominaHistorial, Nullable<double> cargos, Nullable<double> abonos, Nullable<double> cargosUSD, Nullable<double> abonosUSD, string metodoDePago, string usuarioCreacion, Nullable<double> tipoCambio, string moneda, string comentario, Nullable<System.DateTime> fechaCreacion, Nullable<bool> active)
        {
            var idIngresosParameter = idIngresos.HasValue ?
                new ObjectParameter("idIngresos", idIngresos) :
                new ObjectParameter("idIngresos", typeof(System.Guid));
    
            var idAdeudoParameter = idAdeudo.HasValue ?
                new ObjectParameter("IdAdeudo", idAdeudo) :
                new ObjectParameter("IdAdeudo", typeof(System.Guid));
    
            var idNominaHistorialParameter = idNominaHistorial.HasValue ?
                new ObjectParameter("IdNominaHistorial", idNominaHistorial) :
                new ObjectParameter("IdNominaHistorial", typeof(System.Guid));
    
            var cargosParameter = cargos.HasValue ?
                new ObjectParameter("Cargos", cargos) :
                new ObjectParameter("Cargos", typeof(double));
    
            var abonosParameter = abonos.HasValue ?
                new ObjectParameter("Abonos", abonos) :
                new ObjectParameter("Abonos", typeof(double));
    
            var cargosUSDParameter = cargosUSD.HasValue ?
                new ObjectParameter("CargosUSD", cargosUSD) :
                new ObjectParameter("CargosUSD", typeof(double));
    
            var abonosUSDParameter = abonosUSD.HasValue ?
                new ObjectParameter("AbonosUSD", abonosUSD) :
                new ObjectParameter("AbonosUSD", typeof(double));
    
            var metodoDePagoParameter = metodoDePago != null ?
                new ObjectParameter("MetodoDePago", metodoDePago) :
                new ObjectParameter("MetodoDePago", typeof(string));
    
            var usuarioCreacionParameter = usuarioCreacion != null ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(string));
    
            var tipoCambioParameter = tipoCambio.HasValue ?
                new ObjectParameter("TipoCambio", tipoCambio) :
                new ObjectParameter("TipoCambio", typeof(double));
    
            var monedaParameter = moneda != null ?
                new ObjectParameter("Moneda", moneda) :
                new ObjectParameter("Moneda", typeof(string));
    
            var comentarioParameter = comentario != null ?
                new ObjectParameter("Comentario", comentario) :
                new ObjectParameter("Comentario", typeof(string));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMonitoreoIngresos", idIngresosParameter, idAdeudoParameter, idNominaHistorialParameter, cargosParameter, abonosParameter, cargosUSDParameter, abonosUSDParameter, metodoDePagoParameter, usuarioCreacionParameter, tipoCambioParameter, monedaParameter, comentarioParameter, fechaCreacionParameter, activeParameter);
        }
    
        public virtual int InsertNominaDeduccion(Nullable<System.Guid> id, Nullable<System.Guid> idNominaHistorial, string tipo, string concepto, Nullable<double> importe)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idNominaHistorialParameter = idNominaHistorial.HasValue ?
                new ObjectParameter("IdNominaHistorial", idNominaHistorial) :
                new ObjectParameter("IdNominaHistorial", typeof(System.Guid));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("Concepto", concepto) :
                new ObjectParameter("Concepto", typeof(string));
    
            var importeParameter = importe.HasValue ?
                new ObjectParameter("Importe", importe) :
                new ObjectParameter("Importe", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertNominaDeduccion", idParameter, idNominaHistorialParameter, tipoParameter, conceptoParameter, importeParameter);
        }
    
        public virtual int InsertNominaHistorial(Nullable<System.Guid> idNominaHistorial, Nullable<System.Guid> idProveedor, Nullable<System.Guid> idEmpleado, string formaPago, string tipoNomina, Nullable<System.DateTime> fechaPago, Nullable<System.DateTime> fechaInicialPago, Nullable<System.DateTime> fechaFinalPago, Nullable<double> numeroDiasPagados, string tipoRegimen, string moneda, string periodicidadPago, string lugarExpedicion, Nullable<System.DateTime> fechaCreacion, string usuarioCreacion)
        {
            var idNominaHistorialParameter = idNominaHistorial.HasValue ?
                new ObjectParameter("IdNominaHistorial", idNominaHistorial) :
                new ObjectParameter("IdNominaHistorial", typeof(System.Guid));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(System.Guid));
    
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("IdEmpleado", idEmpleado) :
                new ObjectParameter("IdEmpleado", typeof(System.Guid));
    
            var formaPagoParameter = formaPago != null ?
                new ObjectParameter("FormaPago", formaPago) :
                new ObjectParameter("FormaPago", typeof(string));
    
            var tipoNominaParameter = tipoNomina != null ?
                new ObjectParameter("TipoNomina", tipoNomina) :
                new ObjectParameter("TipoNomina", typeof(string));
    
            var fechaPagoParameter = fechaPago.HasValue ?
                new ObjectParameter("FechaPago", fechaPago) :
                new ObjectParameter("FechaPago", typeof(System.DateTime));
    
            var fechaInicialPagoParameter = fechaInicialPago.HasValue ?
                new ObjectParameter("FechaInicialPago", fechaInicialPago) :
                new ObjectParameter("FechaInicialPago", typeof(System.DateTime));
    
            var fechaFinalPagoParameter = fechaFinalPago.HasValue ?
                new ObjectParameter("FechaFinalPago", fechaFinalPago) :
                new ObjectParameter("FechaFinalPago", typeof(System.DateTime));
    
            var numeroDiasPagadosParameter = numeroDiasPagados.HasValue ?
                new ObjectParameter("NumeroDiasPagados", numeroDiasPagados) :
                new ObjectParameter("NumeroDiasPagados", typeof(double));
    
            var tipoRegimenParameter = tipoRegimen != null ?
                new ObjectParameter("TipoRegimen", tipoRegimen) :
                new ObjectParameter("TipoRegimen", typeof(string));
    
            var monedaParameter = moneda != null ?
                new ObjectParameter("Moneda", moneda) :
                new ObjectParameter("Moneda", typeof(string));
    
            var periodicidadPagoParameter = periodicidadPago != null ?
                new ObjectParameter("PeriodicidadPago", periodicidadPago) :
                new ObjectParameter("PeriodicidadPago", typeof(string));
    
            var lugarExpedicionParameter = lugarExpedicion != null ?
                new ObjectParameter("LugarExpedicion", lugarExpedicion) :
                new ObjectParameter("LugarExpedicion", typeof(string));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion != null ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertNominaHistorial", idNominaHistorialParameter, idProveedorParameter, idEmpleadoParameter, formaPagoParameter, tipoNominaParameter, fechaPagoParameter, fechaInicialPagoParameter, fechaFinalPagoParameter, numeroDiasPagadosParameter, tipoRegimenParameter, monedaParameter, periodicidadPagoParameter, lugarExpedicionParameter, fechaCreacionParameter, usuarioCreacionParameter);
        }
    
        public virtual int InsertNominaHorasExtras(Nullable<System.Guid> id, Nullable<double> dias, string tipo, Nullable<double> horasExtras, Nullable<double> importePagado)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var diasParameter = dias.HasValue ?
                new ObjectParameter("Dias", dias) :
                new ObjectParameter("Dias", typeof(double));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var horasExtrasParameter = horasExtras.HasValue ?
                new ObjectParameter("HorasExtras", horasExtras) :
                new ObjectParameter("HorasExtras", typeof(double));
    
            var importePagadoParameter = importePagado.HasValue ?
                new ObjectParameter("ImportePagado", importePagado) :
                new ObjectParameter("ImportePagado", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertNominaHorasExtras", idParameter, diasParameter, tipoParameter, horasExtrasParameter, importePagadoParameter);
        }
    
        public virtual int InsertNominaIncapacidad(Nullable<System.Guid> id, Nullable<System.Guid> idNominaHistorial, string tipo, Nullable<double> diasIncapacidad, Nullable<double> importe)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idNominaHistorialParameter = idNominaHistorial.HasValue ?
                new ObjectParameter("IdNominaHistorial", idNominaHistorial) :
                new ObjectParameter("IdNominaHistorial", typeof(System.Guid));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var diasIncapacidadParameter = diasIncapacidad.HasValue ?
                new ObjectParameter("DiasIncapacidad", diasIncapacidad) :
                new ObjectParameter("DiasIncapacidad", typeof(double));
    
            var importeParameter = importe.HasValue ?
                new ObjectParameter("Importe", importe) :
                new ObjectParameter("Importe", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertNominaIncapacidad", idParameter, idNominaHistorialParameter, tipoParameter, diasIncapacidadParameter, importeParameter);
        }
    
        public virtual int InsertNominaOtrosPagos(Nullable<System.Guid> id, Nullable<System.Guid> idNominaHistorial, string tipo, Nullable<double> importe, string concepto, string subsidioCausado, Nullable<double> saldoAFavor, Nullable<int> año, Nullable<double> remanenteSalFav)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idNominaHistorialParameter = idNominaHistorial.HasValue ?
                new ObjectParameter("IdNominaHistorial", idNominaHistorial) :
                new ObjectParameter("IdNominaHistorial", typeof(System.Guid));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var importeParameter = importe.HasValue ?
                new ObjectParameter("Importe", importe) :
                new ObjectParameter("Importe", typeof(double));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("Concepto", concepto) :
                new ObjectParameter("Concepto", typeof(string));
    
            var subsidioCausadoParameter = subsidioCausado != null ?
                new ObjectParameter("SubsidioCausado", subsidioCausado) :
                new ObjectParameter("SubsidioCausado", typeof(string));
    
            var saldoAFavorParameter = saldoAFavor.HasValue ?
                new ObjectParameter("SaldoAFavor", saldoAFavor) :
                new ObjectParameter("SaldoAFavor", typeof(double));
    
            var añoParameter = año.HasValue ?
                new ObjectParameter("Año", año) :
                new ObjectParameter("Año", typeof(int));
    
            var remanenteSalFavParameter = remanenteSalFav.HasValue ?
                new ObjectParameter("RemanenteSalFav", remanenteSalFav) :
                new ObjectParameter("RemanenteSalFav", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertNominaOtrosPagos", idParameter, idNominaHistorialParameter, tipoParameter, importeParameter, conceptoParameter, subsidioCausadoParameter, saldoAFavorParameter, añoParameter, remanenteSalFavParameter);
        }
    
        public virtual int InsertNominaPercepciones(Nullable<System.Guid> id, Nullable<System.Guid> idNominaHistorial, string tipo, Nullable<double> importeExcento, string concepto, Nullable<double> importeGravado, Nullable<System.Guid> horasExtras, Nullable<double> valorMercado, Nullable<double> precioOtorgarse)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idNominaHistorialParameter = idNominaHistorial.HasValue ?
                new ObjectParameter("IdNominaHistorial", idNominaHistorial) :
                new ObjectParameter("IdNominaHistorial", typeof(System.Guid));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var importeExcentoParameter = importeExcento.HasValue ?
                new ObjectParameter("ImporteExcento", importeExcento) :
                new ObjectParameter("ImporteExcento", typeof(double));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("Concepto", concepto) :
                new ObjectParameter("Concepto", typeof(string));
    
            var importeGravadoParameter = importeGravado.HasValue ?
                new ObjectParameter("ImporteGravado", importeGravado) :
                new ObjectParameter("ImporteGravado", typeof(double));
    
            var horasExtrasParameter = horasExtras.HasValue ?
                new ObjectParameter("HorasExtras", horasExtras) :
                new ObjectParameter("HorasExtras", typeof(System.Guid));
    
            var valorMercadoParameter = valorMercado.HasValue ?
                new ObjectParameter("ValorMercado", valorMercado) :
                new ObjectParameter("ValorMercado", typeof(double));
    
            var precioOtorgarseParameter = precioOtorgarse.HasValue ?
                new ObjectParameter("PrecioOtorgarse", precioOtorgarse) :
                new ObjectParameter("PrecioOtorgarse", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertNominaPercepciones", idParameter, idNominaHistorialParameter, tipoParameter, importeExcentoParameter, conceptoParameter, importeGravadoParameter, horasExtrasParameter, valorMercadoParameter, precioOtorgarseParameter);
        }
    
        public virtual int UpdateClientes(Nullable<System.Guid> idCliente, Nullable<System.Guid> idProveedor, string numeroDeCuenta, string numeroTelefonoAlarma, string palabraClave, string palabraClaveSilenciosa, string nombres, string apellidoPaterno, string apellidoMaterno, string calle, string noInterior, string noExterior, string colonia, string codigoPostal, string telefono, string telefonoTrabajo, string telefonoCelular, string email, byte[] foto, string estado, string pais, string ciudad, Nullable<System.Guid> tipoAfilacion, string numeroPatrocinador, string fechaNacimiento, string lugarNacimiento, string sexo, string estadoCivil, string profesion, string cURP, string rFC, string numCtaPago, string claveBancaria, string banco, string numeroCLABE, string beneficiario, Nullable<System.DateTime> fechaCreacion, string usuarioCreacion, Nullable<bool> activo, Nullable<System.Guid> usuario)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(System.Guid));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(System.Guid));
    
            var numeroDeCuentaParameter = numeroDeCuenta != null ?
                new ObjectParameter("NumeroDeCuenta", numeroDeCuenta) :
                new ObjectParameter("NumeroDeCuenta", typeof(string));
    
            var numeroTelefonoAlarmaParameter = numeroTelefonoAlarma != null ?
                new ObjectParameter("NumeroTelefonoAlarma", numeroTelefonoAlarma) :
                new ObjectParameter("NumeroTelefonoAlarma", typeof(string));
    
            var palabraClaveParameter = palabraClave != null ?
                new ObjectParameter("PalabraClave", palabraClave) :
                new ObjectParameter("PalabraClave", typeof(string));
    
            var palabraClaveSilenciosaParameter = palabraClaveSilenciosa != null ?
                new ObjectParameter("PalabraClaveSilenciosa", palabraClaveSilenciosa) :
                new ObjectParameter("PalabraClaveSilenciosa", typeof(string));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var apellidoPaternoParameter = apellidoPaterno != null ?
                new ObjectParameter("ApellidoPaterno", apellidoPaterno) :
                new ObjectParameter("ApellidoPaterno", typeof(string));
    
            var apellidoMaternoParameter = apellidoMaterno != null ?
                new ObjectParameter("ApellidoMaterno", apellidoMaterno) :
                new ObjectParameter("ApellidoMaterno", typeof(string));
    
            var calleParameter = calle != null ?
                new ObjectParameter("Calle", calle) :
                new ObjectParameter("Calle", typeof(string));
    
            var noInteriorParameter = noInterior != null ?
                new ObjectParameter("NoInterior", noInterior) :
                new ObjectParameter("NoInterior", typeof(string));
    
            var noExteriorParameter = noExterior != null ?
                new ObjectParameter("NoExterior", noExterior) :
                new ObjectParameter("NoExterior", typeof(string));
    
            var coloniaParameter = colonia != null ?
                new ObjectParameter("Colonia", colonia) :
                new ObjectParameter("Colonia", typeof(string));
    
            var codigoPostalParameter = codigoPostal != null ?
                new ObjectParameter("CodigoPostal", codigoPostal) :
                new ObjectParameter("CodigoPostal", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var telefonoTrabajoParameter = telefonoTrabajo != null ?
                new ObjectParameter("TelefonoTrabajo", telefonoTrabajo) :
                new ObjectParameter("TelefonoTrabajo", typeof(string));
    
            var telefonoCelularParameter = telefonoCelular != null ?
                new ObjectParameter("TelefonoCelular", telefonoCelular) :
                new ObjectParameter("TelefonoCelular", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var fotoParameter = foto != null ?
                new ObjectParameter("Foto", foto) :
                new ObjectParameter("Foto", typeof(byte[]));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var paisParameter = pais != null ?
                new ObjectParameter("Pais", pais) :
                new ObjectParameter("Pais", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("Ciudad", ciudad) :
                new ObjectParameter("Ciudad", typeof(string));
    
            var tipoAfilacionParameter = tipoAfilacion.HasValue ?
                new ObjectParameter("TipoAfilacion", tipoAfilacion) :
                new ObjectParameter("TipoAfilacion", typeof(System.Guid));
    
            var numeroPatrocinadorParameter = numeroPatrocinador != null ?
                new ObjectParameter("NumeroPatrocinador", numeroPatrocinador) :
                new ObjectParameter("NumeroPatrocinador", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento != null ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(string));
    
            var lugarNacimientoParameter = lugarNacimiento != null ?
                new ObjectParameter("LugarNacimiento", lugarNacimiento) :
                new ObjectParameter("LugarNacimiento", typeof(string));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("Sexo", sexo) :
                new ObjectParameter("Sexo", typeof(string));
    
            var estadoCivilParameter = estadoCivil != null ?
                new ObjectParameter("EstadoCivil", estadoCivil) :
                new ObjectParameter("EstadoCivil", typeof(string));
    
            var profesionParameter = profesion != null ?
                new ObjectParameter("Profesion", profesion) :
                new ObjectParameter("Profesion", typeof(string));
    
            var cURPParameter = cURP != null ?
                new ObjectParameter("CURP", cURP) :
                new ObjectParameter("CURP", typeof(string));
    
            var rFCParameter = rFC != null ?
                new ObjectParameter("RFC", rFC) :
                new ObjectParameter("RFC", typeof(string));
    
            var numCtaPagoParameter = numCtaPago != null ?
                new ObjectParameter("NumCtaPago", numCtaPago) :
                new ObjectParameter("NumCtaPago", typeof(string));
    
            var claveBancariaParameter = claveBancaria != null ?
                new ObjectParameter("ClaveBancaria", claveBancaria) :
                new ObjectParameter("ClaveBancaria", typeof(string));
    
            var bancoParameter = banco != null ?
                new ObjectParameter("Banco", banco) :
                new ObjectParameter("Banco", typeof(string));
    
            var numeroCLABEParameter = numeroCLABE != null ?
                new ObjectParameter("NumeroCLABE", numeroCLABE) :
                new ObjectParameter("NumeroCLABE", typeof(string));
    
            var beneficiarioParameter = beneficiario != null ?
                new ObjectParameter("Beneficiario", beneficiario) :
                new ObjectParameter("Beneficiario", typeof(string));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion != null ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var usuarioParameter = usuario.HasValue ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateClientes", idClienteParameter, idProveedorParameter, numeroDeCuentaParameter, numeroTelefonoAlarmaParameter, palabraClaveParameter, palabraClaveSilenciosaParameter, nombresParameter, apellidoPaternoParameter, apellidoMaternoParameter, calleParameter, noInteriorParameter, noExteriorParameter, coloniaParameter, codigoPostalParameter, telefonoParameter, telefonoTrabajoParameter, telefonoCelularParameter, emailParameter, fotoParameter, estadoParameter, paisParameter, ciudadParameter, tipoAfilacionParameter, numeroPatrocinadorParameter, fechaNacimientoParameter, lugarNacimientoParameter, sexoParameter, estadoCivilParameter, profesionParameter, cURPParameter, rFCParameter, numCtaPagoParameter, claveBancariaParameter, bancoParameter, numeroCLABEParameter, beneficiarioParameter, fechaCreacionParameter, usuarioCreacionParameter, activoParameter, usuarioParameter);
        }
    
        public virtual int InsertPAC(Nullable<System.Guid> id, string rFC, string usuario, string contrasena, string nombre, string cURP, Nullable<bool> personaMoral, byte[] llave, byte[] certificado, string contrasenaLlave, string regimenFiscal, string registroPatronal, string rfcPatronOrigen, byte[] logo, string lugarExpedicion, Nullable<System.DateTime> vigenciaInicio, Nullable<System.DateTime> vigenciaFinal, string usuarioCreacion, Nullable<System.DateTime> fechaCreacion, Nullable<bool> activo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var rFCParameter = rFC != null ?
                new ObjectParameter("RFC", rFC) :
                new ObjectParameter("RFC", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var cURPParameter = cURP != null ?
                new ObjectParameter("CURP", cURP) :
                new ObjectParameter("CURP", typeof(string));
    
            var personaMoralParameter = personaMoral.HasValue ?
                new ObjectParameter("PersonaMoral", personaMoral) :
                new ObjectParameter("PersonaMoral", typeof(bool));
    
            var llaveParameter = llave != null ?
                new ObjectParameter("Llave", llave) :
                new ObjectParameter("Llave", typeof(byte[]));
    
            var certificadoParameter = certificado != null ?
                new ObjectParameter("Certificado", certificado) :
                new ObjectParameter("Certificado", typeof(byte[]));
    
            var contrasenaLlaveParameter = contrasenaLlave != null ?
                new ObjectParameter("ContrasenaLlave", contrasenaLlave) :
                new ObjectParameter("ContrasenaLlave", typeof(string));
    
            var regimenFiscalParameter = regimenFiscal != null ?
                new ObjectParameter("RegimenFiscal", regimenFiscal) :
                new ObjectParameter("RegimenFiscal", typeof(string));
    
            var registroPatronalParameter = registroPatronal != null ?
                new ObjectParameter("RegistroPatronal", registroPatronal) :
                new ObjectParameter("RegistroPatronal", typeof(string));
    
            var rfcPatronOrigenParameter = rfcPatronOrigen != null ?
                new ObjectParameter("RfcPatronOrigen", rfcPatronOrigen) :
                new ObjectParameter("RfcPatronOrigen", typeof(string));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(byte[]));
    
            var lugarExpedicionParameter = lugarExpedicion != null ?
                new ObjectParameter("LugarExpedicion", lugarExpedicion) :
                new ObjectParameter("LugarExpedicion", typeof(string));
    
            var vigenciaInicioParameter = vigenciaInicio.HasValue ?
                new ObjectParameter("VigenciaInicio", vigenciaInicio) :
                new ObjectParameter("VigenciaInicio", typeof(System.DateTime));
    
            var vigenciaFinalParameter = vigenciaFinal.HasValue ?
                new ObjectParameter("VigenciaFinal", vigenciaFinal) :
                new ObjectParameter("VigenciaFinal", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion != null ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(string));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPAC", idParameter, rFCParameter, usuarioParameter, contrasenaParameter, nombreParameter, cURPParameter, personaMoralParameter, llaveParameter, certificadoParameter, contrasenaLlaveParameter, regimenFiscalParameter, registroPatronalParameter, rfcPatronOrigenParameter, logoParameter, lugarExpedicionParameter, vigenciaInicioParameter, vigenciaFinalParameter, usuarioCreacionParameter, fechaCreacionParameter, activoParameter);
        }
    
        public virtual ObjectResult<GetPAC_Result> GetPAC(Nullable<System.Guid> id, Nullable<int> opcion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPAC_Result>("GetPAC", idParameter, opcionParameter);
        }
    
        public virtual int DeleteCatalogo(Nullable<System.Guid> id, Nullable<int> opcion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCatalogo", idParameter, opcionParameter);
        }
    
        public virtual int UpdateEmpleado(Nullable<System.Guid> id, Nullable<System.Guid> idProveedor, string nombre, string apellidoMaterno, string apellidoPaterno, string correo, Nullable<System.DateTime> fechaNacimiento, Nullable<System.DateTime> fechaInicioRelLaboral, string rFC, string cURP, byte[] huellaDactilar, byte[] foto, string iNE, string numeroSeguridadSocial, string departamento, string direccion, string puesto, string riesgoPuesto, string tipoContrato, string tipoJornada, Nullable<double> salarioDiario, string banco, string cuentaBancaria, string claveEntFed, string gradoEstudios, string telefono, string telefonoEmergencia, byte[] firma, string tipoSangre, string cUIP, string numeroDeLicencia, string numeroDeAutorizacion, Nullable<bool> activo, string usuarioCreacion, Nullable<System.DateTime> fechaCreacion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(System.Guid));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoMaternoParameter = apellidoMaterno != null ?
                new ObjectParameter("ApellidoMaterno", apellidoMaterno) :
                new ObjectParameter("ApellidoMaterno", typeof(string));
    
            var apellidoPaternoParameter = apellidoPaterno != null ?
                new ObjectParameter("ApellidoPaterno", apellidoPaterno) :
                new ObjectParameter("ApellidoPaterno", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var fechaInicioRelLaboralParameter = fechaInicioRelLaboral.HasValue ?
                new ObjectParameter("FechaInicioRelLaboral", fechaInicioRelLaboral) :
                new ObjectParameter("FechaInicioRelLaboral", typeof(System.DateTime));
    
            var rFCParameter = rFC != null ?
                new ObjectParameter("RFC", rFC) :
                new ObjectParameter("RFC", typeof(string));
    
            var cURPParameter = cURP != null ?
                new ObjectParameter("CURP", cURP) :
                new ObjectParameter("CURP", typeof(string));
    
            var huellaDactilarParameter = huellaDactilar != null ?
                new ObjectParameter("HuellaDactilar", huellaDactilar) :
                new ObjectParameter("HuellaDactilar", typeof(byte[]));
    
            var fotoParameter = foto != null ?
                new ObjectParameter("Foto", foto) :
                new ObjectParameter("Foto", typeof(byte[]));
    
            var iNEParameter = iNE != null ?
                new ObjectParameter("INE", iNE) :
                new ObjectParameter("INE", typeof(string));
    
            var numeroSeguridadSocialParameter = numeroSeguridadSocial != null ?
                new ObjectParameter("NumeroSeguridadSocial", numeroSeguridadSocial) :
                new ObjectParameter("NumeroSeguridadSocial", typeof(string));
    
            var departamentoParameter = departamento != null ?
                new ObjectParameter("Departamento", departamento) :
                new ObjectParameter("Departamento", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var puestoParameter = puesto != null ?
                new ObjectParameter("Puesto", puesto) :
                new ObjectParameter("Puesto", typeof(string));
    
            var riesgoPuestoParameter = riesgoPuesto != null ?
                new ObjectParameter("RiesgoPuesto", riesgoPuesto) :
                new ObjectParameter("RiesgoPuesto", typeof(string));
    
            var tipoContratoParameter = tipoContrato != null ?
                new ObjectParameter("TipoContrato", tipoContrato) :
                new ObjectParameter("TipoContrato", typeof(string));
    
            var tipoJornadaParameter = tipoJornada != null ?
                new ObjectParameter("TipoJornada", tipoJornada) :
                new ObjectParameter("TipoJornada", typeof(string));
    
            var salarioDiarioParameter = salarioDiario.HasValue ?
                new ObjectParameter("SalarioDiario", salarioDiario) :
                new ObjectParameter("SalarioDiario", typeof(double));
    
            var bancoParameter = banco != null ?
                new ObjectParameter("Banco", banco) :
                new ObjectParameter("Banco", typeof(string));
    
            var cuentaBancariaParameter = cuentaBancaria != null ?
                new ObjectParameter("CuentaBancaria", cuentaBancaria) :
                new ObjectParameter("CuentaBancaria", typeof(string));
    
            var claveEntFedParameter = claveEntFed != null ?
                new ObjectParameter("ClaveEntFed", claveEntFed) :
                new ObjectParameter("ClaveEntFed", typeof(string));
    
            var gradoEstudiosParameter = gradoEstudios != null ?
                new ObjectParameter("GradoEstudios", gradoEstudios) :
                new ObjectParameter("GradoEstudios", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var telefonoEmergenciaParameter = telefonoEmergencia != null ?
                new ObjectParameter("TelefonoEmergencia", telefonoEmergencia) :
                new ObjectParameter("TelefonoEmergencia", typeof(string));
    
            var firmaParameter = firma != null ?
                new ObjectParameter("Firma", firma) :
                new ObjectParameter("Firma", typeof(byte[]));
    
            var tipoSangreParameter = tipoSangre != null ?
                new ObjectParameter("TipoSangre", tipoSangre) :
                new ObjectParameter("TipoSangre", typeof(string));
    
            var cUIPParameter = cUIP != null ?
                new ObjectParameter("CUIP", cUIP) :
                new ObjectParameter("CUIP", typeof(string));
    
            var numeroDeLicenciaParameter = numeroDeLicencia != null ?
                new ObjectParameter("NumeroDeLicencia", numeroDeLicencia) :
                new ObjectParameter("NumeroDeLicencia", typeof(string));
    
            var numeroDeAutorizacionParameter = numeroDeAutorizacion != null ?
                new ObjectParameter("NumeroDeAutorizacion", numeroDeAutorizacion) :
                new ObjectParameter("NumeroDeAutorizacion", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var usuarioCreacionParameter = usuarioCreacion != null ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(string));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmpleado", idParameter, idProveedorParameter, nombreParameter, apellidoMaternoParameter, apellidoPaternoParameter, correoParameter, fechaNacimientoParameter, fechaInicioRelLaboralParameter, rFCParameter, cURPParameter, huellaDactilarParameter, fotoParameter, iNEParameter, numeroSeguridadSocialParameter, departamentoParameter, direccionParameter, puestoParameter, riesgoPuestoParameter, tipoContratoParameter, tipoJornadaParameter, salarioDiarioParameter, bancoParameter, cuentaBancariaParameter, claveEntFedParameter, gradoEstudiosParameter, telefonoParameter, telefonoEmergenciaParameter, firmaParameter, tipoSangreParameter, cUIPParameter, numeroDeLicenciaParameter, numeroDeAutorizacionParameter, activoParameter, usuarioCreacionParameter, fechaCreacionParameter);
        }
    
        public virtual int UpdateMonitoreoIngresos(Nullable<System.Guid> idIngreso, Nullable<System.Guid> idAdeudo, Nullable<double> cargos, Nullable<double> abonos, Nullable<double> cargosUSD, Nullable<double> abonosUSD, Nullable<double> tipoCambio, string metodoDePago, string moneda, string comentario)
        {
            var idIngresoParameter = idIngreso.HasValue ?
                new ObjectParameter("IdIngreso", idIngreso) :
                new ObjectParameter("IdIngreso", typeof(System.Guid));
    
            var idAdeudoParameter = idAdeudo.HasValue ?
                new ObjectParameter("IdAdeudo", idAdeudo) :
                new ObjectParameter("IdAdeudo", typeof(System.Guid));
    
            var cargosParameter = cargos.HasValue ?
                new ObjectParameter("Cargos", cargos) :
                new ObjectParameter("Cargos", typeof(double));
    
            var abonosParameter = abonos.HasValue ?
                new ObjectParameter("Abonos", abonos) :
                new ObjectParameter("Abonos", typeof(double));
    
            var cargosUSDParameter = cargosUSD.HasValue ?
                new ObjectParameter("CargosUSD", cargosUSD) :
                new ObjectParameter("CargosUSD", typeof(double));
    
            var abonosUSDParameter = abonosUSD.HasValue ?
                new ObjectParameter("AbonosUSD", abonosUSD) :
                new ObjectParameter("AbonosUSD", typeof(double));
    
            var tipoCambioParameter = tipoCambio.HasValue ?
                new ObjectParameter("TipoCambio", tipoCambio) :
                new ObjectParameter("TipoCambio", typeof(double));
    
            var metodoDePagoParameter = metodoDePago != null ?
                new ObjectParameter("MetodoDePago", metodoDePago) :
                new ObjectParameter("MetodoDePago", typeof(string));
    
            var monedaParameter = moneda != null ?
                new ObjectParameter("Moneda", moneda) :
                new ObjectParameter("Moneda", typeof(string));
    
            var comentarioParameter = comentario != null ?
                new ObjectParameter("Comentario", comentario) :
                new ObjectParameter("Comentario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMonitoreoIngresos", idIngresoParameter, idAdeudoParameter, cargosParameter, abonosParameter, cargosUSDParameter, abonosUSDParameter, tipoCambioParameter, metodoDePagoParameter, monedaParameter, comentarioParameter);
        }
    
        public virtual int UpdateNominaHistorial(Nullable<System.Guid> idNominaHistorial, Nullable<System.Guid> idProveedor, Nullable<System.Guid> idEmpleado, string formaPago, string tipoNomina, Nullable<System.DateTime> fechaPago, Nullable<System.DateTime> fechaInicialPago, Nullable<System.DateTime> fechaFinalPago, Nullable<double> numeroDiasPagados, string tipoRegimen, string moneda, string periodicidadPago, string lugarExpedicion, Nullable<System.DateTime> fechaCreeacion, string usuarioCreacion)
        {
            var idNominaHistorialParameter = idNominaHistorial.HasValue ?
                new ObjectParameter("IdNominaHistorial", idNominaHistorial) :
                new ObjectParameter("IdNominaHistorial", typeof(System.Guid));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(System.Guid));
    
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("IdEmpleado", idEmpleado) :
                new ObjectParameter("IdEmpleado", typeof(System.Guid));
    
            var formaPagoParameter = formaPago != null ?
                new ObjectParameter("FormaPago", formaPago) :
                new ObjectParameter("FormaPago", typeof(string));
    
            var tipoNominaParameter = tipoNomina != null ?
                new ObjectParameter("TipoNomina", tipoNomina) :
                new ObjectParameter("TipoNomina", typeof(string));
    
            var fechaPagoParameter = fechaPago.HasValue ?
                new ObjectParameter("FechaPago", fechaPago) :
                new ObjectParameter("FechaPago", typeof(System.DateTime));
    
            var fechaInicialPagoParameter = fechaInicialPago.HasValue ?
                new ObjectParameter("FechaInicialPago", fechaInicialPago) :
                new ObjectParameter("FechaInicialPago", typeof(System.DateTime));
    
            var fechaFinalPagoParameter = fechaFinalPago.HasValue ?
                new ObjectParameter("FechaFinalPago", fechaFinalPago) :
                new ObjectParameter("FechaFinalPago", typeof(System.DateTime));
    
            var numeroDiasPagadosParameter = numeroDiasPagados.HasValue ?
                new ObjectParameter("NumeroDiasPagados", numeroDiasPagados) :
                new ObjectParameter("NumeroDiasPagados", typeof(double));
    
            var tipoRegimenParameter = tipoRegimen != null ?
                new ObjectParameter("TipoRegimen", tipoRegimen) :
                new ObjectParameter("TipoRegimen", typeof(string));
    
            var monedaParameter = moneda != null ?
                new ObjectParameter("Moneda", moneda) :
                new ObjectParameter("Moneda", typeof(string));
    
            var periodicidadPagoParameter = periodicidadPago != null ?
                new ObjectParameter("PeriodicidadPago", periodicidadPago) :
                new ObjectParameter("PeriodicidadPago", typeof(string));
    
            var lugarExpedicionParameter = lugarExpedicion != null ?
                new ObjectParameter("LugarExpedicion", lugarExpedicion) :
                new ObjectParameter("LugarExpedicion", typeof(string));
    
            var fechaCreeacionParameter = fechaCreeacion.HasValue ?
                new ObjectParameter("FechaCreeacion", fechaCreeacion) :
                new ObjectParameter("FechaCreeacion", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion != null ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateNominaHistorial", idNominaHistorialParameter, idProveedorParameter, idEmpleadoParameter, formaPagoParameter, tipoNominaParameter, fechaPagoParameter, fechaInicialPagoParameter, fechaFinalPagoParameter, numeroDiasPagadosParameter, tipoRegimenParameter, monedaParameter, periodicidadPagoParameter, lugarExpedicionParameter, fechaCreeacionParameter, usuarioCreacionParameter);
        }
    
        public virtual int UpdateUsuarios(Nullable<System.Guid> id, string usuario, string contrasena, string tipoUsuario, string roles, Nullable<bool> activo, Nullable<int> timbres, Nullable<int> timbresUsados, Nullable<int> timbresCancelados)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            var tipoUsuarioParameter = tipoUsuario != null ?
                new ObjectParameter("TipoUsuario", tipoUsuario) :
                new ObjectParameter("TipoUsuario", typeof(string));
    
            var rolesParameter = roles != null ?
                new ObjectParameter("Roles", roles) :
                new ObjectParameter("Roles", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var timbresParameter = timbres.HasValue ?
                new ObjectParameter("Timbres", timbres) :
                new ObjectParameter("Timbres", typeof(int));
    
            var timbresUsadosParameter = timbresUsados.HasValue ?
                new ObjectParameter("TimbresUsados", timbresUsados) :
                new ObjectParameter("TimbresUsados", typeof(int));
    
            var timbresCanceladosParameter = timbresCancelados.HasValue ?
                new ObjectParameter("TimbresCancelados", timbresCancelados) :
                new ObjectParameter("TimbresCancelados", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUsuarios", idParameter, usuarioParameter, contrasenaParameter, tipoUsuarioParameter, rolesParameter, activoParameter, timbresParameter, timbresUsadosParameter, timbresCanceladosParameter);
        }
    
        public virtual ObjectResult<GetInventario_Result> GetInventario()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInventario_Result>("GetInventario");
        }
    
        public virtual ObjectResult<Clientes> GetClientes(Nullable<System.Guid> id, string cadena, Nullable<bool> activo, Nullable<int> opcion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var cadenaParameter = cadena != null ?
                new ObjectParameter("Cadena", cadena) :
                new ObjectParameter("Cadena", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Clientes>("GetClientes", idParameter, cadenaParameter, activoParameter, opcionParameter);
        }
    
        public virtual ObjectResult<Clientes> GetClientes(Nullable<System.Guid> id, string cadena, Nullable<bool> activo, Nullable<int> opcion, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var cadenaParameter = cadena != null ?
                new ObjectParameter("Cadena", cadena) :
                new ObjectParameter("Cadena", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Clientes>("GetClientes", mergeOption, idParameter, cadenaParameter, activoParameter, opcionParameter);
        }
    
        public virtual ObjectResult<MonitoreoIngresos> GetMonitoreoIngreso(Nullable<int> opcion, Nullable<System.Guid> idIngreso)
        {
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            var idIngresoParameter = idIngreso.HasValue ?
                new ObjectParameter("IdIngreso", idIngreso) :
                new ObjectParameter("IdIngreso", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MonitoreoIngresos>("GetMonitoreoIngreso", opcionParameter, idIngresoParameter);
        }
    
        public virtual ObjectResult<MonitoreoIngresos> GetMonitoreoIngreso(Nullable<int> opcion, Nullable<System.Guid> idIngreso, MergeOption mergeOption)
        {
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            var idIngresoParameter = idIngreso.HasValue ?
                new ObjectParameter("IdIngreso", idIngreso) :
                new ObjectParameter("IdIngreso", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MonitoreoIngresos>("GetMonitoreoIngreso", mergeOption, opcionParameter, idIngresoParameter);
        }
    
        public virtual int InsertUsuario(Nullable<System.Guid> id, string usuario, string contraseña, string tipoUsuario, string roles, Nullable<bool> activo, Nullable<int> timbres, Nullable<int> timbresUsados, Nullable<int> timbresCancelados)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("Contraseña", contraseña) :
                new ObjectParameter("Contraseña", typeof(string));
    
            var tipoUsuarioParameter = tipoUsuario != null ?
                new ObjectParameter("TipoUsuario", tipoUsuario) :
                new ObjectParameter("TipoUsuario", typeof(string));
    
            var rolesParameter = roles != null ?
                new ObjectParameter("Roles", roles) :
                new ObjectParameter("Roles", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var timbresParameter = timbres.HasValue ?
                new ObjectParameter("Timbres", timbres) :
                new ObjectParameter("Timbres", typeof(int));
    
            var timbresUsadosParameter = timbresUsados.HasValue ?
                new ObjectParameter("TimbresUsados", timbresUsados) :
                new ObjectParameter("TimbresUsados", typeof(int));
    
            var timbresCanceladosParameter = timbresCancelados.HasValue ?
                new ObjectParameter("TimbresCancelados", timbresCancelados) :
                new ObjectParameter("TimbresCancelados", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUsuario", idParameter, usuarioParameter, contraseñaParameter, tipoUsuarioParameter, rolesParameter, activoParameter, timbresParameter, timbresUsadosParameter, timbresCanceladosParameter);
        }
    
        public virtual int InsertCatalagos(Nullable<System.Guid> id, string tipo, string nombre, string descripcion, Nullable<double> valor, Nullable<int> cantidad, Nullable<System.DateTime> fechaLimiteInicio, Nullable<System.DateTime> fechaLimiteFinal, Nullable<System.DateTime> fechaCreacion, string usuarioCreacion, Nullable<bool> activo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var valorParameter = valor.HasValue ?
                new ObjectParameter("Valor", valor) :
                new ObjectParameter("Valor", typeof(double));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var fechaLimiteInicioParameter = fechaLimiteInicio.HasValue ?
                new ObjectParameter("FechaLimiteInicio", fechaLimiteInicio) :
                new ObjectParameter("FechaLimiteInicio", typeof(System.DateTime));
    
            var fechaLimiteFinalParameter = fechaLimiteFinal.HasValue ?
                new ObjectParameter("FechaLimiteFinal", fechaLimiteFinal) :
                new ObjectParameter("FechaLimiteFinal", typeof(System.DateTime));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion != null ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCatalagos", idParameter, tipoParameter, nombreParameter, descripcionParameter, valorParameter, cantidadParameter, fechaLimiteInicioParameter, fechaLimiteFinalParameter, fechaCreacionParameter, usuarioCreacionParameter, activoParameter);
        }
    
        public virtual ObjectResult<Empleados> GetEmpleados(Nullable<int> op, Nullable<System.Guid> id)
        {
            var opParameter = op.HasValue ?
                new ObjectParameter("op", op) :
                new ObjectParameter("op", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Empleados>("GetEmpleados", opParameter, idParameter);
        }
    
        public virtual ObjectResult<Empleados> GetEmpleados(Nullable<int> op, Nullable<System.Guid> id, MergeOption mergeOption)
        {
            var opParameter = op.HasValue ?
                new ObjectParameter("op", op) :
                new ObjectParameter("op", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Empleados>("GetEmpleados", mergeOption, opParameter, idParameter);
        }
    
        public virtual ObjectResult<NominaHistorial> GetNominaHistorial(Nullable<int> opcion, Nullable<System.Guid> id)
        {
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NominaHistorial>("GetNominaHistorial", opcionParameter, idParameter);
        }
    
        public virtual ObjectResult<NominaHistorial> GetNominaHistorial(Nullable<int> opcion, Nullable<System.Guid> id, MergeOption mergeOption)
        {
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NominaHistorial>("GetNominaHistorial", mergeOption, opcionParameter, idParameter);
        }
    
        public virtual ObjectResult<CFDIPorOperacion> GetCFDIPorOperacion(Nullable<System.Guid> id, Nullable<int> opcion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CFDIPorOperacion>("GetCFDIPorOperacion", idParameter, opcionParameter);
        }
    
        public virtual ObjectResult<CFDIPorOperacion> GetCFDIPorOperacion(Nullable<System.Guid> id, Nullable<int> opcion, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CFDIPorOperacion>("GetCFDIPorOperacion", mergeOption, idParameter, opcionParameter);
        }
    
        public virtual int GetCarritoCompras(Nullable<System.Guid> idUsuario, Nullable<int> option)
        {
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(System.Guid));
    
            var optionParameter = option.HasValue ?
                new ObjectParameter("Option", option) :
                new ObjectParameter("Option", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCarritoCompras", idUsuarioParameter, optionParameter);
        }
    
        public virtual ObjectResult<CFDI> GetCFDI(Nullable<System.Guid> id, Nullable<int> opcion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CFDI>("GetCFDI", idParameter, opcionParameter);
        }
    
        public virtual ObjectResult<CFDI> GetCFDI(Nullable<System.Guid> id, Nullable<int> opcion, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CFDI>("GetCFDI", mergeOption, idParameter, opcionParameter);
        }
    
        public virtual ObjectResult<GetClienteByClientID_Result> GetClienteByClientID(Nullable<System.Guid> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClienteByClientID_Result>("GetClienteByClientID", clientIDParameter);
        }
    
        public virtual int InsertCFDIPorOperacion(Nullable<System.Guid> id, Nullable<System.Guid> idNominaHistorial, Nullable<System.Guid> idAdeudosInstalacion, Nullable<System.Guid> idCFDI)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idNominaHistorialParameter = idNominaHistorial.HasValue ?
                new ObjectParameter("IdNominaHistorial", idNominaHistorial) :
                new ObjectParameter("IdNominaHistorial", typeof(System.Guid));
    
            var idAdeudosInstalacionParameter = idAdeudosInstalacion.HasValue ?
                new ObjectParameter("IdAdeudosInstalacion", idAdeudosInstalacion) :
                new ObjectParameter("IdAdeudosInstalacion", typeof(System.Guid));
    
            var idCFDIParameter = idCFDI.HasValue ?
                new ObjectParameter("IdCFDI", idCFDI) :
                new ObjectParameter("IdCFDI", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCFDIPorOperacion", idParameter, idNominaHistorialParameter, idAdeudosInstalacionParameter, idCFDIParameter);
        }
    
        public virtual int UpdateCFDI(Nullable<System.Guid> id, string tipo, Nullable<int> folio, byte[] xML, string ruta, Nullable<System.Guid> idCliente, Nullable<System.Guid> idEmpleado, Nullable<System.Guid> idProveedor, Nullable<bool> cancelado)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var xMLParameter = xML != null ?
                new ObjectParameter("XML", xML) :
                new ObjectParameter("XML", typeof(byte[]));
    
            var rutaParameter = ruta != null ?
                new ObjectParameter("Ruta", ruta) :
                new ObjectParameter("Ruta", typeof(string));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(System.Guid));
    
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("IdEmpleado", idEmpleado) :
                new ObjectParameter("IdEmpleado", typeof(System.Guid));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(System.Guid));
    
            var canceladoParameter = cancelado.HasValue ?
                new ObjectParameter("Cancelado", cancelado) :
                new ObjectParameter("Cancelado", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCFDI", idParameter, tipoParameter, folioParameter, xMLParameter, rutaParameter, idClienteParameter, idEmpleadoParameter, idProveedorParameter, canceladoParameter);
        }
    
        public virtual int InsertAdeudosInstalacion(Nullable<System.Guid> id, Nullable<System.Guid> idProveedor, Nullable<System.Guid> idCliente, Nullable<System.DateTime> fechaContrato, Nullable<bool> pagoComision, Nullable<System.Guid> idAcesor, Nullable<System.Guid> idPaquete, Nullable<System.Guid> idMensualidad, Nullable<int> cantidad, string concepto, string descripcion, string unidad, Nullable<double> total, string claveProdServ, Nullable<System.DateTime> fechaInstalacion, Nullable<System.Guid> idInstalador, string comentarios, Nullable<double> anticipo, Nullable<bool> pagado, Nullable<bool> instalacion, Nullable<bool> requiereFacturacion, Nullable<bool> requiereCancelacion, Nullable<bool> revisoRobot, Nullable<System.DateTime> fechaCreacion, string usuarioCreacion, Nullable<bool> activo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(System.Guid));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(System.Guid));
    
            var fechaContratoParameter = fechaContrato.HasValue ?
                new ObjectParameter("FechaContrato", fechaContrato) :
                new ObjectParameter("FechaContrato", typeof(System.DateTime));
    
            var pagoComisionParameter = pagoComision.HasValue ?
                new ObjectParameter("PagoComision", pagoComision) :
                new ObjectParameter("PagoComision", typeof(bool));
    
            var idAcesorParameter = idAcesor.HasValue ?
                new ObjectParameter("IdAcesor", idAcesor) :
                new ObjectParameter("IdAcesor", typeof(System.Guid));
    
            var idPaqueteParameter = idPaquete.HasValue ?
                new ObjectParameter("IdPaquete", idPaquete) :
                new ObjectParameter("IdPaquete", typeof(System.Guid));
    
            var idMensualidadParameter = idMensualidad.HasValue ?
                new ObjectParameter("IdMensualidad", idMensualidad) :
                new ObjectParameter("IdMensualidad", typeof(System.Guid));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("Concepto", concepto) :
                new ObjectParameter("Concepto", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var unidadParameter = unidad != null ?
                new ObjectParameter("Unidad", unidad) :
                new ObjectParameter("Unidad", typeof(string));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(double));
    
            var claveProdServParameter = claveProdServ != null ?
                new ObjectParameter("ClaveProdServ", claveProdServ) :
                new ObjectParameter("ClaveProdServ", typeof(string));
    
            var fechaInstalacionParameter = fechaInstalacion.HasValue ?
                new ObjectParameter("FechaInstalacion", fechaInstalacion) :
                new ObjectParameter("FechaInstalacion", typeof(System.DateTime));
    
            var idInstaladorParameter = idInstalador.HasValue ?
                new ObjectParameter("IdInstalador", idInstalador) :
                new ObjectParameter("IdInstalador", typeof(System.Guid));
    
            var comentariosParameter = comentarios != null ?
                new ObjectParameter("Comentarios", comentarios) :
                new ObjectParameter("Comentarios", typeof(string));
    
            var anticipoParameter = anticipo.HasValue ?
                new ObjectParameter("Anticipo", anticipo) :
                new ObjectParameter("Anticipo", typeof(double));
    
            var pagadoParameter = pagado.HasValue ?
                new ObjectParameter("Pagado", pagado) :
                new ObjectParameter("Pagado", typeof(bool));
    
            var instalacionParameter = instalacion.HasValue ?
                new ObjectParameter("Instalacion", instalacion) :
                new ObjectParameter("Instalacion", typeof(bool));
    
            var requiereFacturacionParameter = requiereFacturacion.HasValue ?
                new ObjectParameter("RequiereFacturacion", requiereFacturacion) :
                new ObjectParameter("RequiereFacturacion", typeof(bool));
    
            var requiereCancelacionParameter = requiereCancelacion.HasValue ?
                new ObjectParameter("RequiereCancelacion", requiereCancelacion) :
                new ObjectParameter("RequiereCancelacion", typeof(bool));
    
            var revisoRobotParameter = revisoRobot.HasValue ?
                new ObjectParameter("RevisoRobot", revisoRobot) :
                new ObjectParameter("RevisoRobot", typeof(bool));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion != null ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAdeudosInstalacion", idParameter, idProveedorParameter, idClienteParameter, fechaContratoParameter, pagoComisionParameter, idAcesorParameter, idPaqueteParameter, idMensualidadParameter, cantidadParameter, conceptoParameter, descripcionParameter, unidadParameter, totalParameter, claveProdServParameter, fechaInstalacionParameter, idInstaladorParameter, comentariosParameter, anticipoParameter, pagadoParameter, instalacionParameter, requiereFacturacionParameter, requiereCancelacionParameter, revisoRobotParameter, fechaCreacionParameter, usuarioCreacionParameter, activoParameter);
        }
    
        public virtual int UpdateAdeudosInstalaciones(Nullable<System.Guid> id, Nullable<System.Guid> idProveedor, Nullable<System.Guid> idCliente, Nullable<System.Guid> idPaquete, Nullable<System.DateTime> fechaContrato, Nullable<bool> pagoComision, Nullable<System.DateTime> fechaPago, Nullable<System.Guid> idAsesor, Nullable<System.Guid> idMensualidad, Nullable<int> cantidad, string concepto, string descripcion, string unidad, Nullable<double> total, string claveProdServ, Nullable<System.DateTime> fechaInstalacion, Nullable<System.Guid> idInstalador, string comentarios, Nullable<double> anticipo, Nullable<bool> pagado, Nullable<bool> instalacion, Nullable<bool> requiereFacturacion, Nullable<bool> requiereCancelacion, Nullable<bool> revisoRobot, Nullable<bool> activo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(System.Guid));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(System.Guid));
    
            var idPaqueteParameter = idPaquete.HasValue ?
                new ObjectParameter("IdPaquete", idPaquete) :
                new ObjectParameter("IdPaquete", typeof(System.Guid));
    
            var fechaContratoParameter = fechaContrato.HasValue ?
                new ObjectParameter("FechaContrato", fechaContrato) :
                new ObjectParameter("FechaContrato", typeof(System.DateTime));
    
            var pagoComisionParameter = pagoComision.HasValue ?
                new ObjectParameter("PagoComision", pagoComision) :
                new ObjectParameter("PagoComision", typeof(bool));
    
            var fechaPagoParameter = fechaPago.HasValue ?
                new ObjectParameter("FechaPago", fechaPago) :
                new ObjectParameter("FechaPago", typeof(System.DateTime));
    
            var idAsesorParameter = idAsesor.HasValue ?
                new ObjectParameter("IdAsesor", idAsesor) :
                new ObjectParameter("IdAsesor", typeof(System.Guid));
    
            var idMensualidadParameter = idMensualidad.HasValue ?
                new ObjectParameter("IdMensualidad", idMensualidad) :
                new ObjectParameter("IdMensualidad", typeof(System.Guid));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("Concepto", concepto) :
                new ObjectParameter("Concepto", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var unidadParameter = unidad != null ?
                new ObjectParameter("Unidad", unidad) :
                new ObjectParameter("Unidad", typeof(string));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(double));
    
            var claveProdServParameter = claveProdServ != null ?
                new ObjectParameter("ClaveProdServ", claveProdServ) :
                new ObjectParameter("ClaveProdServ", typeof(string));
    
            var fechaInstalacionParameter = fechaInstalacion.HasValue ?
                new ObjectParameter("FechaInstalacion", fechaInstalacion) :
                new ObjectParameter("FechaInstalacion", typeof(System.DateTime));
    
            var idInstaladorParameter = idInstalador.HasValue ?
                new ObjectParameter("IdInstalador", idInstalador) :
                new ObjectParameter("IdInstalador", typeof(System.Guid));
    
            var comentariosParameter = comentarios != null ?
                new ObjectParameter("Comentarios", comentarios) :
                new ObjectParameter("Comentarios", typeof(string));
    
            var anticipoParameter = anticipo.HasValue ?
                new ObjectParameter("Anticipo", anticipo) :
                new ObjectParameter("Anticipo", typeof(double));
    
            var pagadoParameter = pagado.HasValue ?
                new ObjectParameter("Pagado", pagado) :
                new ObjectParameter("Pagado", typeof(bool));
    
            var instalacionParameter = instalacion.HasValue ?
                new ObjectParameter("Instalacion", instalacion) :
                new ObjectParameter("Instalacion", typeof(bool));
    
            var requiereFacturacionParameter = requiereFacturacion.HasValue ?
                new ObjectParameter("RequiereFacturacion", requiereFacturacion) :
                new ObjectParameter("RequiereFacturacion", typeof(bool));
    
            var requiereCancelacionParameter = requiereCancelacion.HasValue ?
                new ObjectParameter("RequiereCancelacion", requiereCancelacion) :
                new ObjectParameter("RequiereCancelacion", typeof(bool));
    
            var revisoRobotParameter = revisoRobot.HasValue ?
                new ObjectParameter("RevisoRobot", revisoRobot) :
                new ObjectParameter("RevisoRobot", typeof(bool));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAdeudosInstalaciones", idParameter, idProveedorParameter, idClienteParameter, idPaqueteParameter, fechaContratoParameter, pagoComisionParameter, fechaPagoParameter, idAsesorParameter, idMensualidadParameter, cantidadParameter, conceptoParameter, descripcionParameter, unidadParameter, totalParameter, claveProdServParameter, fechaInstalacionParameter, idInstaladorParameter, comentariosParameter, anticipoParameter, pagadoParameter, instalacionParameter, requiereFacturacionParameter, requiereCancelacionParameter, revisoRobotParameter, activoParameter);
        }
    
        public virtual ObjectResult<AdeudosInstalaciones> GetAdeudosInstalaciones(Nullable<System.Guid> id, Nullable<System.Guid> idCliente, Nullable<int> opcion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(System.Guid));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AdeudosInstalaciones>("GetAdeudosInstalaciones", idParameter, idClienteParameter, opcionParameter);
        }
    
        public virtual ObjectResult<AdeudosInstalaciones> GetAdeudosInstalaciones(Nullable<System.Guid> id, Nullable<System.Guid> idCliente, Nullable<int> opcion, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(System.Guid));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AdeudosInstalaciones>("GetAdeudosInstalaciones", mergeOption, idParameter, idClienteParameter, opcionParameter);
        }
    }
}
