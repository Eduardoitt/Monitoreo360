//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AvenzoSeguridadEntities : DbContext
    {
        public AvenzoSeguridadEntities()
            : base("name=AvenzoSeguridadEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<PACForPanel> PACForPanel { get; set; }
        public virtual DbSet<AdeudosForPanel> AdeudosForPanel { get; set; }
        public virtual DbSet<CFDIForPanel> CFDIForPanel { get; set; }
        public virtual DbSet<ClientesForPanel> ClientesForPanel { get; set; }
        public virtual DbSet<EmpleadosForPanel> EmpleadosForPanel { get; set; }
        public virtual DbSet<Bancos> Bancos { get; set; }
        public virtual DbSet<ClaveProdServ> ClaveProdServ { get; set; }
        public virtual DbSet<Contratos> Contratos { get; set; }
        public virtual DbSet<Deducciones> Deducciones { get; set; }
        public virtual DbSet<Estados> Estados { get; set; }
        public virtual DbSet<FormaDePago> FormaDePago { get; set; }
        public virtual DbSet<Horas> Horas { get; set; }
        public virtual DbSet<Incapacidades> Incapacidades { get; set; }
        public virtual DbSet<Jornadas> Jornadas { get; set; }
        public virtual DbSet<MetodosDePago> MetodosDePago { get; set; }
        public virtual DbSet<Monedas> Monedas { get; set; }
        public virtual DbSet<Nominas> Nominas { get; set; }
        public virtual DbSet<OrigenRecurso> OrigenRecurso { get; set; }
        public virtual DbSet<OtrosPagos> OtrosPagos { get; set; }
        public virtual DbSet<PAC> PAC { get; set; }
        public virtual DbSet<Percepciones> Percepciones { get; set; }
        public virtual DbSet<PeriodicidadPago> PeriodicidadPago { get; set; }
        public virtual DbSet<Regimen> Regimen { get; set; }
        public virtual DbSet<RegimenFiscal> RegimenFiscal { get; set; }
        public virtual DbSet<RiesgoPuesto> RiesgoPuesto { get; set; }
        public virtual DbSet<UsoCFDI> UsoCFDI { get; set; }
        public virtual DbSet<AdeudosInstalaciones> AdeudosInstalaciones { get; set; }
        public virtual DbSet<CFDI> CFDI { get; set; }
        public virtual DbSet<CFDIEnDeuda> CFDIEnDeuda { get; set; }
        public virtual DbSet<CFDIPorOperacion> CFDIPorOperacion { get; set; }
        public virtual DbSet<ClaveProdServHistorial> ClaveProdServHistorial { get; set; }
        public virtual DbSet<ClaveProdServPorPAC> ClaveProdServPorPAC { get; set; }
        public virtual DbSet<Clientes> Clientes { get; set; }
        public virtual DbSet<Empleados> Empleados { get; set; }
        public virtual DbSet<LogMonitoreo360> LogMonitoreo360 { get; set; }
        public virtual DbSet<MonitoreoIngresos> MonitoreoIngresos { get; set; }
        public virtual DbSet<NominaDeduccion> NominaDeduccion { get; set; }
        public virtual DbSet<NominaHistorial> NominaHistorial { get; set; }
        public virtual DbSet<NominaHorasExtras> NominaHorasExtras { get; set; }
        public virtual DbSet<NominaIncapacidad> NominaIncapacidad { get; set; }
        public virtual DbSet<NominaJubilacionPensionRetiro> NominaJubilacionPensionRetiro { get; set; }
        public virtual DbSet<NominaOtrosPago> NominaOtrosPago { get; set; }
        public virtual DbSet<NominaPercepcion> NominaPercepcion { get; set; }
        public virtual DbSet<NominaPercepciones> NominaPercepciones { get; set; }
        public virtual DbSet<NominaSeparacionIndemnizacion> NominaSeparacionIndemnizacion { get; set; }
        public virtual DbSet<ReporteLlamada> ReporteLlamada { get; set; }
        public virtual DbSet<Sensores> Sensores { get; set; }
        public virtual DbSet<Usuarios> Usuarios { get; set; }
        public virtual DbSet<Catalogos> Catalogos { get; set; }
        public virtual DbSet<Ciudad> Ciudad { get; set; }
        public virtual DbSet<Pais> Pais { get; set; }
        public virtual DbSet<CodigoEventos> CodigoEventos { get; set; }
        public virtual DbSet<ClienteContactos> ClienteContactos { get; set; }
        public virtual DbSet<HorarioOperaciones> HorarioOperaciones { get; set; }
        public virtual DbSet<Incidentes> Incidentes { get; set; }
        public virtual DbSet<Llamadas> Llamadas { get; set; }
        public virtual DbSet<CodigosPostales> CodigosPostales { get; set; }
    
        public virtual int DeletePAC(Nullable<System.Guid> id, Nullable<int> opcion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePAC", idParameter, opcionParameter);
        }
    
        public virtual int InsertPAC(Nullable<System.Guid> id, string rFC, string usuario, string contrasena, string nombre, string cURP, Nullable<bool> personaMoral, byte[] llave, byte[] certificado, string contrasenaLlave, string regimenFiscal, string registroPatronal, string rfcPatronOrigen, string logo, string lugarExpedicion, Nullable<System.DateTime> vigenciaInicio, Nullable<System.DateTime> vigenciaFinal, Nullable<System.Guid> usuarioCreacion, Nullable<System.DateTime> fechaCreacion, Nullable<bool> activo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var rFCParameter = rFC != null ?
                new ObjectParameter("RFC", rFC) :
                new ObjectParameter("RFC", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var cURPParameter = cURP != null ?
                new ObjectParameter("CURP", cURP) :
                new ObjectParameter("CURP", typeof(string));
    
            var personaMoralParameter = personaMoral.HasValue ?
                new ObjectParameter("PersonaMoral", personaMoral) :
                new ObjectParameter("PersonaMoral", typeof(bool));
    
            var llaveParameter = llave != null ?
                new ObjectParameter("Llave", llave) :
                new ObjectParameter("Llave", typeof(byte[]));
    
            var certificadoParameter = certificado != null ?
                new ObjectParameter("Certificado", certificado) :
                new ObjectParameter("Certificado", typeof(byte[]));
    
            var contrasenaLlaveParameter = contrasenaLlave != null ?
                new ObjectParameter("ContrasenaLlave", contrasenaLlave) :
                new ObjectParameter("ContrasenaLlave", typeof(string));
    
            var regimenFiscalParameter = regimenFiscal != null ?
                new ObjectParameter("RegimenFiscal", regimenFiscal) :
                new ObjectParameter("RegimenFiscal", typeof(string));
    
            var registroPatronalParameter = registroPatronal != null ?
                new ObjectParameter("RegistroPatronal", registroPatronal) :
                new ObjectParameter("RegistroPatronal", typeof(string));
    
            var rfcPatronOrigenParameter = rfcPatronOrigen != null ?
                new ObjectParameter("RfcPatronOrigen", rfcPatronOrigen) :
                new ObjectParameter("RfcPatronOrigen", typeof(string));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(string));
    
            var lugarExpedicionParameter = lugarExpedicion != null ?
                new ObjectParameter("LugarExpedicion", lugarExpedicion) :
                new ObjectParameter("LugarExpedicion", typeof(string));
    
            var vigenciaInicioParameter = vigenciaInicio.HasValue ?
                new ObjectParameter("VigenciaInicio", vigenciaInicio) :
                new ObjectParameter("VigenciaInicio", typeof(System.DateTime));
    
            var vigenciaFinalParameter = vigenciaFinal.HasValue ?
                new ObjectParameter("VigenciaFinal", vigenciaFinal) :
                new ObjectParameter("VigenciaFinal", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(System.Guid));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPAC", idParameter, rFCParameter, usuarioParameter, contrasenaParameter, nombreParameter, cURPParameter, personaMoralParameter, llaveParameter, certificadoParameter, contrasenaLlaveParameter, regimenFiscalParameter, registroPatronalParameter, rfcPatronOrigenParameter, logoParameter, lugarExpedicionParameter, vigenciaInicioParameter, vigenciaFinalParameter, usuarioCreacionParameter, fechaCreacionParameter, activoParameter);
        }
    
        public virtual int UpdatePAC(Nullable<System.Guid> id, string rFC, string usuario, string contrasena, string nombre, string cURP, Nullable<bool> personaMoral, byte[] llave, byte[] certificado, string contrasenaLlave, string regimenFiscal, string registroPatronal, string rfcPatronOrigen, byte[] logo, string lugarExpedicion, Nullable<System.DateTime> vigenciaInicio, Nullable<System.DateTime> vigenciaFinal, Nullable<bool> activo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var rFCParameter = rFC != null ?
                new ObjectParameter("RFC", rFC) :
                new ObjectParameter("RFC", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var cURPParameter = cURP != null ?
                new ObjectParameter("CURP", cURP) :
                new ObjectParameter("CURP", typeof(string));
    
            var personaMoralParameter = personaMoral.HasValue ?
                new ObjectParameter("PersonaMoral", personaMoral) :
                new ObjectParameter("PersonaMoral", typeof(bool));
    
            var llaveParameter = llave != null ?
                new ObjectParameter("Llave", llave) :
                new ObjectParameter("Llave", typeof(byte[]));
    
            var certificadoParameter = certificado != null ?
                new ObjectParameter("Certificado", certificado) :
                new ObjectParameter("Certificado", typeof(byte[]));
    
            var contrasenaLlaveParameter = contrasenaLlave != null ?
                new ObjectParameter("ContrasenaLlave", contrasenaLlave) :
                new ObjectParameter("ContrasenaLlave", typeof(string));
    
            var regimenFiscalParameter = regimenFiscal != null ?
                new ObjectParameter("RegimenFiscal", regimenFiscal) :
                new ObjectParameter("RegimenFiscal", typeof(string));
    
            var registroPatronalParameter = registroPatronal != null ?
                new ObjectParameter("RegistroPatronal", registroPatronal) :
                new ObjectParameter("RegistroPatronal", typeof(string));
    
            var rfcPatronOrigenParameter = rfcPatronOrigen != null ?
                new ObjectParameter("RfcPatronOrigen", rfcPatronOrigen) :
                new ObjectParameter("RfcPatronOrigen", typeof(string));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(byte[]));
    
            var lugarExpedicionParameter = lugarExpedicion != null ?
                new ObjectParameter("LugarExpedicion", lugarExpedicion) :
                new ObjectParameter("LugarExpedicion", typeof(string));
    
            var vigenciaInicioParameter = vigenciaInicio.HasValue ?
                new ObjectParameter("VigenciaInicio", vigenciaInicio) :
                new ObjectParameter("VigenciaInicio", typeof(System.DateTime));
    
            var vigenciaFinalParameter = vigenciaFinal.HasValue ?
                new ObjectParameter("VigenciaFinal", vigenciaFinal) :
                new ObjectParameter("VigenciaFinal", typeof(System.DateTime));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePAC", idParameter, rFCParameter, usuarioParameter, contrasenaParameter, nombreParameter, cURPParameter, personaMoralParameter, llaveParameter, certificadoParameter, contrasenaLlaveParameter, regimenFiscalParameter, registroPatronalParameter, rfcPatronOrigenParameter, logoParameter, lugarExpedicionParameter, vigenciaInicioParameter, vigenciaFinalParameter, activoParameter);
        }
    
        public virtual int InsertCFDI(Nullable<System.Guid> id, string tipo, Nullable<int> folio, byte[] xML, string ruta, Nullable<System.Guid> idCliente, Nullable<System.Guid> idEmpleado, Nullable<System.Guid> idProveedor, Nullable<bool> cancelado, Nullable<System.DateTime> fechaCreacion, Nullable<System.Guid> usuarioCreacion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var xMLParameter = xML != null ?
                new ObjectParameter("XML", xML) :
                new ObjectParameter("XML", typeof(byte[]));
    
            var rutaParameter = ruta != null ?
                new ObjectParameter("Ruta", ruta) :
                new ObjectParameter("Ruta", typeof(string));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(System.Guid));
    
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("IdEmpleado", idEmpleado) :
                new ObjectParameter("IdEmpleado", typeof(System.Guid));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(System.Guid));
    
            var canceladoParameter = cancelado.HasValue ?
                new ObjectParameter("Cancelado", cancelado) :
                new ObjectParameter("Cancelado", typeof(bool));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCFDI", idParameter, tipoParameter, folioParameter, xMLParameter, rutaParameter, idClienteParameter, idEmpleadoParameter, idProveedorParameter, canceladoParameter, fechaCreacionParameter, usuarioCreacionParameter);
        }
    
        public virtual int InsertCFDIPorOperacion(Nullable<System.Guid> id, Nullable<System.Guid> idNominaHistorial, Nullable<System.Guid> idAdeudosInstalacion, Nullable<System.Guid> idCFDI)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idNominaHistorialParameter = idNominaHistorial.HasValue ?
                new ObjectParameter("IdNominaHistorial", idNominaHistorial) :
                new ObjectParameter("IdNominaHistorial", typeof(System.Guid));
    
            var idAdeudosInstalacionParameter = idAdeudosInstalacion.HasValue ?
                new ObjectParameter("IdAdeudosInstalacion", idAdeudosInstalacion) :
                new ObjectParameter("IdAdeudosInstalacion", typeof(System.Guid));
    
            var idCFDIParameter = idCFDI.HasValue ?
                new ObjectParameter("IdCFDI", idCFDI) :
                new ObjectParameter("IdCFDI", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCFDIPorOperacion", idParameter, idNominaHistorialParameter, idAdeudosInstalacionParameter, idCFDIParameter);
        }
    
        public virtual int InsertClaveProdServHistorial(Nullable<System.Guid> id, Nullable<System.Guid> idPAC, string c_ClaveProdServ, Nullable<System.Guid> usuarioCreacion, Nullable<System.DateTime> fechaCreacion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idPACParameter = idPAC.HasValue ?
                new ObjectParameter("IdPAC", idPAC) :
                new ObjectParameter("IdPAC", typeof(System.Guid));
    
            var c_ClaveProdServParameter = c_ClaveProdServ != null ?
                new ObjectParameter("c_ClaveProdServ", c_ClaveProdServ) :
                new ObjectParameter("c_ClaveProdServ", typeof(string));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(System.Guid));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertClaveProdServHistorial", idParameter, idPACParameter, c_ClaveProdServParameter, usuarioCreacionParameter, fechaCreacionParameter);
        }
    
        public virtual int InsertClaveProdServPorPAC(Nullable<System.Guid> id, Nullable<System.Guid> idPAC, string clase, Nullable<System.Guid> usuarioCreacion, Nullable<System.DateTime> fechaCreacion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idPACParameter = idPAC.HasValue ?
                new ObjectParameter("IdPAC", idPAC) :
                new ObjectParameter("IdPAC", typeof(System.Guid));
    
            var claseParameter = clase != null ?
                new ObjectParameter("Clase", clase) :
                new ObjectParameter("Clase", typeof(string));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(System.Guid));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertClaveProdServPorPAC", idParameter, idPACParameter, claseParameter, usuarioCreacionParameter, fechaCreacionParameter);
        }
    
        public virtual int InsertClienteContacto(Nullable<System.Guid> id, Nullable<System.Guid> idCliente, string nombre, string direccion, string telefono, Nullable<int> prioridad, Nullable<System.DateTime> fechaCreacion, Nullable<System.Guid> usuarioCreacion, Nullable<bool> activo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(System.Guid));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var prioridadParameter = prioridad.HasValue ?
                new ObjectParameter("Prioridad", prioridad) :
                new ObjectParameter("Prioridad", typeof(int));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(System.Guid));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertClienteContacto", idParameter, idClienteParameter, nombreParameter, direccionParameter, telefonoParameter, prioridadParameter, fechaCreacionParameter, usuarioCreacionParameter, activoParameter);
        }
    
        public virtual int InsertClientes(Nullable<System.Guid> id, Nullable<System.Guid> idProveedor, Nullable<System.Guid> idUsuario, string numAlarma, string nombres, string apellidoPaterno, string apellidoMaterno, string numeroDeCuenta, string palabraClave, string palabraClaveSilen, string calle, string noInterior, string noExterior, string colonia, string codigoPostal, string referencias, string colorEstablecimiento, string entreCalles, string googleMaps, string descripcion, string telefono, string telTrabajo, string telCelular, string email, byte[] foto, string estado, string pais, string ciudad, Nullable<System.Guid> tipoAfilacion, string numeroPatrocinador, string fechaNacimiento, string lugarNacimiento, string sexo, string estadoCivil, string profesion, string curp, string rfc, string banco, string numCtaPago, string claveBancaria, string numeroCLABE, string beneficiario, Nullable<System.DateTime> fechaCreacion, Nullable<System.Guid> usuarioCreacion, Nullable<bool> activo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(System.Guid));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(System.Guid));
    
            var numAlarmaParameter = numAlarma != null ?
                new ObjectParameter("numAlarma", numAlarma) :
                new ObjectParameter("numAlarma", typeof(string));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("nombres", nombres) :
                new ObjectParameter("nombres", typeof(string));
    
            var apellidoPaternoParameter = apellidoPaterno != null ?
                new ObjectParameter("ApellidoPaterno", apellidoPaterno) :
                new ObjectParameter("ApellidoPaterno", typeof(string));
    
            var apellidoMaternoParameter = apellidoMaterno != null ?
                new ObjectParameter("ApellidoMaterno", apellidoMaterno) :
                new ObjectParameter("ApellidoMaterno", typeof(string));
    
            var numeroDeCuentaParameter = numeroDeCuenta != null ?
                new ObjectParameter("NumeroDeCuenta", numeroDeCuenta) :
                new ObjectParameter("NumeroDeCuenta", typeof(string));
    
            var palabraClaveParameter = palabraClave != null ?
                new ObjectParameter("PalabraClave", palabraClave) :
                new ObjectParameter("PalabraClave", typeof(string));
    
            var palabraClaveSilenParameter = palabraClaveSilen != null ?
                new ObjectParameter("PalabraClaveSilen", palabraClaveSilen) :
                new ObjectParameter("PalabraClaveSilen", typeof(string));
    
            var calleParameter = calle != null ?
                new ObjectParameter("calle", calle) :
                new ObjectParameter("calle", typeof(string));
    
            var noInteriorParameter = noInterior != null ?
                new ObjectParameter("NoInterior", noInterior) :
                new ObjectParameter("NoInterior", typeof(string));
    
            var noExteriorParameter = noExterior != null ?
                new ObjectParameter("NoExterior", noExterior) :
                new ObjectParameter("NoExterior", typeof(string));
    
            var coloniaParameter = colonia != null ?
                new ObjectParameter("Colonia", colonia) :
                new ObjectParameter("Colonia", typeof(string));
    
            var codigoPostalParameter = codigoPostal != null ?
                new ObjectParameter("CodigoPostal", codigoPostal) :
                new ObjectParameter("CodigoPostal", typeof(string));
    
            var referenciasParameter = referencias != null ?
                new ObjectParameter("Referencias", referencias) :
                new ObjectParameter("Referencias", typeof(string));
    
            var colorEstablecimientoParameter = colorEstablecimiento != null ?
                new ObjectParameter("ColorEstablecimiento", colorEstablecimiento) :
                new ObjectParameter("ColorEstablecimiento", typeof(string));
    
            var entreCallesParameter = entreCalles != null ?
                new ObjectParameter("entreCalles", entreCalles) :
                new ObjectParameter("entreCalles", typeof(string));
    
            var googleMapsParameter = googleMaps != null ?
                new ObjectParameter("GoogleMaps", googleMaps) :
                new ObjectParameter("GoogleMaps", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var telTrabajoParameter = telTrabajo != null ?
                new ObjectParameter("telTrabajo", telTrabajo) :
                new ObjectParameter("telTrabajo", typeof(string));
    
            var telCelularParameter = telCelular != null ?
                new ObjectParameter("telCelular", telCelular) :
                new ObjectParameter("telCelular", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var fotoParameter = foto != null ?
                new ObjectParameter("foto", foto) :
                new ObjectParameter("foto", typeof(byte[]));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("estado", estado) :
                new ObjectParameter("estado", typeof(string));
    
            var paisParameter = pais != null ?
                new ObjectParameter("pais", pais) :
                new ObjectParameter("pais", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("ciudad", ciudad) :
                new ObjectParameter("ciudad", typeof(string));
    
            var tipoAfilacionParameter = tipoAfilacion.HasValue ?
                new ObjectParameter("tipoAfilacion", tipoAfilacion) :
                new ObjectParameter("tipoAfilacion", typeof(System.Guid));
    
            var numeroPatrocinadorParameter = numeroPatrocinador != null ?
                new ObjectParameter("numeroPatrocinador", numeroPatrocinador) :
                new ObjectParameter("numeroPatrocinador", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento != null ?
                new ObjectParameter("fechaNacimiento", fechaNacimiento) :
                new ObjectParameter("fechaNacimiento", typeof(string));
    
            var lugarNacimientoParameter = lugarNacimiento != null ?
                new ObjectParameter("lugarNacimiento", lugarNacimiento) :
                new ObjectParameter("lugarNacimiento", typeof(string));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("sexo", sexo) :
                new ObjectParameter("sexo", typeof(string));
    
            var estadoCivilParameter = estadoCivil != null ?
                new ObjectParameter("estadoCivil", estadoCivil) :
                new ObjectParameter("estadoCivil", typeof(string));
    
            var profesionParameter = profesion != null ?
                new ObjectParameter("profesion", profesion) :
                new ObjectParameter("profesion", typeof(string));
    
            var curpParameter = curp != null ?
                new ObjectParameter("curp", curp) :
                new ObjectParameter("curp", typeof(string));
    
            var rfcParameter = rfc != null ?
                new ObjectParameter("rfc", rfc) :
                new ObjectParameter("rfc", typeof(string));
    
            var bancoParameter = banco != null ?
                new ObjectParameter("banco", banco) :
                new ObjectParameter("banco", typeof(string));
    
            var numCtaPagoParameter = numCtaPago != null ?
                new ObjectParameter("NumCtaPago", numCtaPago) :
                new ObjectParameter("NumCtaPago", typeof(string));
    
            var claveBancariaParameter = claveBancaria != null ?
                new ObjectParameter("ClaveBancaria", claveBancaria) :
                new ObjectParameter("ClaveBancaria", typeof(string));
    
            var numeroCLABEParameter = numeroCLABE != null ?
                new ObjectParameter("numeroCLABE", numeroCLABE) :
                new ObjectParameter("numeroCLABE", typeof(string));
    
            var beneficiarioParameter = beneficiario != null ?
                new ObjectParameter("beneficiario", beneficiario) :
                new ObjectParameter("beneficiario", typeof(string));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("usuarioCreacion", usuarioCreacion) :
                new ObjectParameter("usuarioCreacion", typeof(System.Guid));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertClientes", idParameter, idProveedorParameter, idUsuarioParameter, numAlarmaParameter, nombresParameter, apellidoPaternoParameter, apellidoMaternoParameter, numeroDeCuentaParameter, palabraClaveParameter, palabraClaveSilenParameter, calleParameter, noInteriorParameter, noExteriorParameter, coloniaParameter, codigoPostalParameter, referenciasParameter, colorEstablecimientoParameter, entreCallesParameter, googleMapsParameter, descripcionParameter, telefonoParameter, telTrabajoParameter, telCelularParameter, emailParameter, fotoParameter, estadoParameter, paisParameter, ciudadParameter, tipoAfilacionParameter, numeroPatrocinadorParameter, fechaNacimientoParameter, lugarNacimientoParameter, sexoParameter, estadoCivilParameter, profesionParameter, curpParameter, rfcParameter, bancoParameter, numCtaPagoParameter, claveBancariaParameter, numeroCLABEParameter, beneficiarioParameter, fechaCreacionParameter, usuarioCreacionParameter, activoParameter);
        }
    
        public virtual int InsertEmpleados(Nullable<System.Guid> id, Nullable<int> noEmpleado, Nullable<System.Guid> idProveedor, string nombre, string apellidoMaterno, string apellidoPaterno, Nullable<System.Guid> idUsuario, string email, Nullable<System.DateTime> fechaNacimiento, Nullable<System.DateTime> fechaInicioRelLaboral, string rFC, string cURP, byte[] huellaDactilar, string foto, string iNE, string numeroSeguridadSocial, string departamento, string direccion, string puesto, string riesgoPuesto, string tipoContrato, string tipoJornada, Nullable<double> salarioDiario, string banco, string cuentaBancaria, string claveEntFed, string gradoEstudios, string telefono, string telefonoEmergencia, byte[] firma, string tipoSangre, string cUIP, string numeroDeLicencia, string numeroDeAutorizacion, Nullable<System.Guid> idPlantilla, Nullable<bool> activo, Nullable<System.Guid> usuarioCreacion, Nullable<System.DateTime> fechaCreacion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var noEmpleadoParameter = noEmpleado.HasValue ?
                new ObjectParameter("NoEmpleado", noEmpleado) :
                new ObjectParameter("NoEmpleado", typeof(int));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(System.Guid));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoMaternoParameter = apellidoMaterno != null ?
                new ObjectParameter("ApellidoMaterno", apellidoMaterno) :
                new ObjectParameter("ApellidoMaterno", typeof(string));
    
            var apellidoPaternoParameter = apellidoPaterno != null ?
                new ObjectParameter("ApellidoPaterno", apellidoPaterno) :
                new ObjectParameter("ApellidoPaterno", typeof(string));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(System.Guid));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var fechaInicioRelLaboralParameter = fechaInicioRelLaboral.HasValue ?
                new ObjectParameter("FechaInicioRelLaboral", fechaInicioRelLaboral) :
                new ObjectParameter("FechaInicioRelLaboral", typeof(System.DateTime));
    
            var rFCParameter = rFC != null ?
                new ObjectParameter("RFC", rFC) :
                new ObjectParameter("RFC", typeof(string));
    
            var cURPParameter = cURP != null ?
                new ObjectParameter("CURP", cURP) :
                new ObjectParameter("CURP", typeof(string));
    
            var huellaDactilarParameter = huellaDactilar != null ?
                new ObjectParameter("HuellaDactilar", huellaDactilar) :
                new ObjectParameter("HuellaDactilar", typeof(byte[]));
    
            var fotoParameter = foto != null ?
                new ObjectParameter("Foto", foto) :
                new ObjectParameter("Foto", typeof(string));
    
            var iNEParameter = iNE != null ?
                new ObjectParameter("INE", iNE) :
                new ObjectParameter("INE", typeof(string));
    
            var numeroSeguridadSocialParameter = numeroSeguridadSocial != null ?
                new ObjectParameter("NumeroSeguridadSocial", numeroSeguridadSocial) :
                new ObjectParameter("NumeroSeguridadSocial", typeof(string));
    
            var departamentoParameter = departamento != null ?
                new ObjectParameter("Departamento", departamento) :
                new ObjectParameter("Departamento", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var puestoParameter = puesto != null ?
                new ObjectParameter("Puesto", puesto) :
                new ObjectParameter("Puesto", typeof(string));
    
            var riesgoPuestoParameter = riesgoPuesto != null ?
                new ObjectParameter("RiesgoPuesto", riesgoPuesto) :
                new ObjectParameter("RiesgoPuesto", typeof(string));
    
            var tipoContratoParameter = tipoContrato != null ?
                new ObjectParameter("TipoContrato", tipoContrato) :
                new ObjectParameter("TipoContrato", typeof(string));
    
            var tipoJornadaParameter = tipoJornada != null ?
                new ObjectParameter("TipoJornada", tipoJornada) :
                new ObjectParameter("TipoJornada", typeof(string));
    
            var salarioDiarioParameter = salarioDiario.HasValue ?
                new ObjectParameter("SalarioDiario", salarioDiario) :
                new ObjectParameter("SalarioDiario", typeof(double));
    
            var bancoParameter = banco != null ?
                new ObjectParameter("Banco", banco) :
                new ObjectParameter("Banco", typeof(string));
    
            var cuentaBancariaParameter = cuentaBancaria != null ?
                new ObjectParameter("CuentaBancaria", cuentaBancaria) :
                new ObjectParameter("CuentaBancaria", typeof(string));
    
            var claveEntFedParameter = claveEntFed != null ?
                new ObjectParameter("ClaveEntFed", claveEntFed) :
                new ObjectParameter("ClaveEntFed", typeof(string));
    
            var gradoEstudiosParameter = gradoEstudios != null ?
                new ObjectParameter("GradoEstudios", gradoEstudios) :
                new ObjectParameter("GradoEstudios", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var telefonoEmergenciaParameter = telefonoEmergencia != null ?
                new ObjectParameter("TelefonoEmergencia", telefonoEmergencia) :
                new ObjectParameter("TelefonoEmergencia", typeof(string));
    
            var firmaParameter = firma != null ?
                new ObjectParameter("Firma", firma) :
                new ObjectParameter("Firma", typeof(byte[]));
    
            var tipoSangreParameter = tipoSangre != null ?
                new ObjectParameter("TipoSangre", tipoSangre) :
                new ObjectParameter("TipoSangre", typeof(string));
    
            var cUIPParameter = cUIP != null ?
                new ObjectParameter("CUIP", cUIP) :
                new ObjectParameter("CUIP", typeof(string));
    
            var numeroDeLicenciaParameter = numeroDeLicencia != null ?
                new ObjectParameter("NumeroDeLicencia", numeroDeLicencia) :
                new ObjectParameter("NumeroDeLicencia", typeof(string));
    
            var numeroDeAutorizacionParameter = numeroDeAutorizacion != null ?
                new ObjectParameter("NumeroDeAutorizacion", numeroDeAutorizacion) :
                new ObjectParameter("NumeroDeAutorizacion", typeof(string));
    
            var idPlantillaParameter = idPlantilla.HasValue ?
                new ObjectParameter("IdPlantilla", idPlantilla) :
                new ObjectParameter("IdPlantilla", typeof(System.Guid));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(System.Guid));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertEmpleados", idParameter, noEmpleadoParameter, idProveedorParameter, nombreParameter, apellidoMaternoParameter, apellidoPaternoParameter, idUsuarioParameter, emailParameter, fechaNacimientoParameter, fechaInicioRelLaboralParameter, rFCParameter, cURPParameter, huellaDactilarParameter, fotoParameter, iNEParameter, numeroSeguridadSocialParameter, departamentoParameter, direccionParameter, puestoParameter, riesgoPuestoParameter, tipoContratoParameter, tipoJornadaParameter, salarioDiarioParameter, bancoParameter, cuentaBancariaParameter, claveEntFedParameter, gradoEstudiosParameter, telefonoParameter, telefonoEmergenciaParameter, firmaParameter, tipoSangreParameter, cUIPParameter, numeroDeLicenciaParameter, numeroDeAutorizacionParameter, idPlantillaParameter, activoParameter, usuarioCreacionParameter, fechaCreacionParameter);
        }
    
        public virtual int InsertFacturasPorAdeduos(Nullable<System.Guid> id, Nullable<System.Guid> idAdeudo, Nullable<System.Guid> idCFDI)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idAdeudoParameter = idAdeudo.HasValue ?
                new ObjectParameter("IdAdeudo", idAdeudo) :
                new ObjectParameter("IdAdeudo", typeof(System.Guid));
    
            var idCFDIParameter = idCFDI.HasValue ?
                new ObjectParameter("IdCFDI", idCFDI) :
                new ObjectParameter("IdCFDI", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertFacturasPorAdeduos", idParameter, idAdeudoParameter, idCFDIParameter);
        }
    
        public virtual int InsertLogMonitoreo360(Nullable<System.Guid> id, string log, Nullable<System.Guid> usuarioCreacion, Nullable<System.DateTime> fechaCreacion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var logParameter = log != null ?
                new ObjectParameter("Log", log) :
                new ObjectParameter("Log", typeof(string));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(System.Guid));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertLogMonitoreo360", idParameter, logParameter, usuarioCreacionParameter, fechaCreacionParameter);
        }
    
        public virtual int InsertMonitoreoIngresos(Nullable<System.Guid> idIngresos, Nullable<System.Guid> idAdeudo, Nullable<System.Guid> idNominaHistorial, Nullable<double> cargos, Nullable<double> abonos, Nullable<double> cargosUSD, Nullable<double> abonosUSD, string metodoDePago, string formaDePago, string usoCFDI, Nullable<System.Guid> usuarioCreacion, Nullable<double> tipoCambio, string moneda, string comentario, Nullable<System.DateTime> fechaCreacion, Nullable<bool> active)
        {
            var idIngresosParameter = idIngresos.HasValue ?
                new ObjectParameter("idIngresos", idIngresos) :
                new ObjectParameter("idIngresos", typeof(System.Guid));
    
            var idAdeudoParameter = idAdeudo.HasValue ?
                new ObjectParameter("IdAdeudo", idAdeudo) :
                new ObjectParameter("IdAdeudo", typeof(System.Guid));
    
            var idNominaHistorialParameter = idNominaHistorial.HasValue ?
                new ObjectParameter("IdNominaHistorial", idNominaHistorial) :
                new ObjectParameter("IdNominaHistorial", typeof(System.Guid));
    
            var cargosParameter = cargos.HasValue ?
                new ObjectParameter("Cargos", cargos) :
                new ObjectParameter("Cargos", typeof(double));
    
            var abonosParameter = abonos.HasValue ?
                new ObjectParameter("Abonos", abonos) :
                new ObjectParameter("Abonos", typeof(double));
    
            var cargosUSDParameter = cargosUSD.HasValue ?
                new ObjectParameter("CargosUSD", cargosUSD) :
                new ObjectParameter("CargosUSD", typeof(double));
    
            var abonosUSDParameter = abonosUSD.HasValue ?
                new ObjectParameter("AbonosUSD", abonosUSD) :
                new ObjectParameter("AbonosUSD", typeof(double));
    
            var metodoDePagoParameter = metodoDePago != null ?
                new ObjectParameter("MetodoDePago", metodoDePago) :
                new ObjectParameter("MetodoDePago", typeof(string));
    
            var formaDePagoParameter = formaDePago != null ?
                new ObjectParameter("FormaDePago", formaDePago) :
                new ObjectParameter("FormaDePago", typeof(string));
    
            var usoCFDIParameter = usoCFDI != null ?
                new ObjectParameter("UsoCFDI", usoCFDI) :
                new ObjectParameter("UsoCFDI", typeof(string));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(System.Guid));
    
            var tipoCambioParameter = tipoCambio.HasValue ?
                new ObjectParameter("TipoCambio", tipoCambio) :
                new ObjectParameter("TipoCambio", typeof(double));
    
            var monedaParameter = moneda != null ?
                new ObjectParameter("Moneda", moneda) :
                new ObjectParameter("Moneda", typeof(string));
    
            var comentarioParameter = comentario != null ?
                new ObjectParameter("Comentario", comentario) :
                new ObjectParameter("Comentario", typeof(string));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertMonitoreoIngresos", idIngresosParameter, idAdeudoParameter, idNominaHistorialParameter, cargosParameter, abonosParameter, cargosUSDParameter, abonosUSDParameter, metodoDePagoParameter, formaDePagoParameter, usoCFDIParameter, usuarioCreacionParameter, tipoCambioParameter, monedaParameter, comentarioParameter, fechaCreacionParameter, activeParameter);
        }
    
        public virtual int InsertNominaDeduccion(Nullable<System.Guid> id, Nullable<System.Guid> idNominaHistorial, string tipo, string concepto, Nullable<double> importe, Nullable<System.Guid> usuarioCreacion, Nullable<System.DateTime> fechaCreacion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idNominaHistorialParameter = idNominaHistorial.HasValue ?
                new ObjectParameter("IdNominaHistorial", idNominaHistorial) :
                new ObjectParameter("IdNominaHistorial", typeof(System.Guid));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("Concepto", concepto) :
                new ObjectParameter("Concepto", typeof(string));
    
            var importeParameter = importe.HasValue ?
                new ObjectParameter("Importe", importe) :
                new ObjectParameter("Importe", typeof(double));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(System.Guid));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertNominaDeduccion", idParameter, idNominaHistorialParameter, tipoParameter, conceptoParameter, importeParameter, usuarioCreacionParameter, fechaCreacionParameter);
        }
    
        public virtual int InsertNominaHistorial(Nullable<System.Guid> id, Nullable<System.Guid> idProveedor, Nullable<System.Guid> idEmpleado, string tipoNomina, Nullable<System.DateTime> fechaPago, Nullable<System.DateTime> fechaInicialPago, Nullable<System.DateTime> fechaFinalPago, Nullable<double> numeroDiasPagados, string tipoRegimen, string moneda, string periodicidadPago, string lugarExpedicion, Nullable<System.Guid> idPercepciones, Nullable<System.DateTime> fechaCreacion, string usuarioCreacion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(System.Guid));
    
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("IdEmpleado", idEmpleado) :
                new ObjectParameter("IdEmpleado", typeof(System.Guid));
    
            var tipoNominaParameter = tipoNomina != null ?
                new ObjectParameter("TipoNomina", tipoNomina) :
                new ObjectParameter("TipoNomina", typeof(string));
    
            var fechaPagoParameter = fechaPago.HasValue ?
                new ObjectParameter("FechaPago", fechaPago) :
                new ObjectParameter("FechaPago", typeof(System.DateTime));
    
            var fechaInicialPagoParameter = fechaInicialPago.HasValue ?
                new ObjectParameter("FechaInicialPago", fechaInicialPago) :
                new ObjectParameter("FechaInicialPago", typeof(System.DateTime));
    
            var fechaFinalPagoParameter = fechaFinalPago.HasValue ?
                new ObjectParameter("FechaFinalPago", fechaFinalPago) :
                new ObjectParameter("FechaFinalPago", typeof(System.DateTime));
    
            var numeroDiasPagadosParameter = numeroDiasPagados.HasValue ?
                new ObjectParameter("NumeroDiasPagados", numeroDiasPagados) :
                new ObjectParameter("NumeroDiasPagados", typeof(double));
    
            var tipoRegimenParameter = tipoRegimen != null ?
                new ObjectParameter("TipoRegimen", tipoRegimen) :
                new ObjectParameter("TipoRegimen", typeof(string));
    
            var monedaParameter = moneda != null ?
                new ObjectParameter("Moneda", moneda) :
                new ObjectParameter("Moneda", typeof(string));
    
            var periodicidadPagoParameter = periodicidadPago != null ?
                new ObjectParameter("PeriodicidadPago", periodicidadPago) :
                new ObjectParameter("PeriodicidadPago", typeof(string));
    
            var lugarExpedicionParameter = lugarExpedicion != null ?
                new ObjectParameter("LugarExpedicion", lugarExpedicion) :
                new ObjectParameter("LugarExpedicion", typeof(string));
    
            var idPercepcionesParameter = idPercepciones.HasValue ?
                new ObjectParameter("IdPercepciones", idPercepciones) :
                new ObjectParameter("IdPercepciones", typeof(System.Guid));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion != null ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertNominaHistorial", idParameter, idProveedorParameter, idEmpleadoParameter, tipoNominaParameter, fechaPagoParameter, fechaInicialPagoParameter, fechaFinalPagoParameter, numeroDiasPagadosParameter, tipoRegimenParameter, monedaParameter, periodicidadPagoParameter, lugarExpedicionParameter, idPercepcionesParameter, fechaCreacionParameter, usuarioCreacionParameter);
        }
    
        public virtual int InsertNominaHorasExtras(Nullable<System.Guid> id, Nullable<System.Guid> idPercepcion, Nullable<double> dias, string tipo, Nullable<double> horasExtras, Nullable<double> importePagado, Nullable<System.DateTime> fechaCreacion, Nullable<System.Guid> usuarioCreacion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idPercepcionParameter = idPercepcion.HasValue ?
                new ObjectParameter("IdPercepcion", idPercepcion) :
                new ObjectParameter("IdPercepcion", typeof(System.Guid));
    
            var diasParameter = dias.HasValue ?
                new ObjectParameter("Dias", dias) :
                new ObjectParameter("Dias", typeof(double));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var horasExtrasParameter = horasExtras.HasValue ?
                new ObjectParameter("HorasExtras", horasExtras) :
                new ObjectParameter("HorasExtras", typeof(double));
    
            var importePagadoParameter = importePagado.HasValue ?
                new ObjectParameter("ImportePagado", importePagado) :
                new ObjectParameter("ImportePagado", typeof(double));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertNominaHorasExtras", idParameter, idPercepcionParameter, diasParameter, tipoParameter, horasExtrasParameter, importePagadoParameter, fechaCreacionParameter, usuarioCreacionParameter);
        }
    
        public virtual int InsertNominaIncapacidad(Nullable<System.Guid> id, Nullable<System.Guid> idNominaHistorial, string tipo, Nullable<double> diasIncapacidad, Nullable<double> importe, Nullable<System.Guid> usuarioCreacion, Nullable<System.DateTime> fechaCreacion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idNominaHistorialParameter = idNominaHistorial.HasValue ?
                new ObjectParameter("IdNominaHistorial", idNominaHistorial) :
                new ObjectParameter("IdNominaHistorial", typeof(System.Guid));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var diasIncapacidadParameter = diasIncapacidad.HasValue ?
                new ObjectParameter("DiasIncapacidad", diasIncapacidad) :
                new ObjectParameter("DiasIncapacidad", typeof(double));
    
            var importeParameter = importe.HasValue ?
                new ObjectParameter("Importe", importe) :
                new ObjectParameter("Importe", typeof(double));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(System.Guid));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertNominaIncapacidad", idParameter, idNominaHistorialParameter, tipoParameter, diasIncapacidadParameter, importeParameter, usuarioCreacionParameter, fechaCreacionParameter);
        }
    
        public virtual int InsertNominaJubilacionPensionRetiro(Nullable<System.Guid> id, Nullable<double> totalUnaExhibicion, Nullable<double> totalParcialidad, Nullable<double> montoDiario, Nullable<double> ingresoAcumulable, Nullable<double> ingresoNoAcumulable, Nullable<System.DateTime> fechaCreacion, Nullable<System.Guid> usuarioCreacion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var totalUnaExhibicionParameter = totalUnaExhibicion.HasValue ?
                new ObjectParameter("TotalUnaExhibicion", totalUnaExhibicion) :
                new ObjectParameter("TotalUnaExhibicion", typeof(double));
    
            var totalParcialidadParameter = totalParcialidad.HasValue ?
                new ObjectParameter("TotalParcialidad", totalParcialidad) :
                new ObjectParameter("TotalParcialidad", typeof(double));
    
            var montoDiarioParameter = montoDiario.HasValue ?
                new ObjectParameter("MontoDiario", montoDiario) :
                new ObjectParameter("MontoDiario", typeof(double));
    
            var ingresoAcumulableParameter = ingresoAcumulable.HasValue ?
                new ObjectParameter("IngresoAcumulable", ingresoAcumulable) :
                new ObjectParameter("IngresoAcumulable", typeof(double));
    
            var ingresoNoAcumulableParameter = ingresoNoAcumulable.HasValue ?
                new ObjectParameter("IngresoNoAcumulable", ingresoNoAcumulable) :
                new ObjectParameter("IngresoNoAcumulable", typeof(double));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertNominaJubilacionPensionRetiro", idParameter, totalUnaExhibicionParameter, totalParcialidadParameter, montoDiarioParameter, ingresoAcumulableParameter, ingresoNoAcumulableParameter, fechaCreacionParameter, usuarioCreacionParameter);
        }
    
        public virtual int InsertNominaOtrosPagos(Nullable<System.Guid> id, Nullable<System.Guid> idNominaHistorial, string tipo, Nullable<double> importe, string concepto, string subsidioCausado, Nullable<double> saldoAFavor, Nullable<int> año, Nullable<double> remanenteSalFav)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idNominaHistorialParameter = idNominaHistorial.HasValue ?
                new ObjectParameter("IdNominaHistorial", idNominaHistorial) :
                new ObjectParameter("IdNominaHistorial", typeof(System.Guid));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var importeParameter = importe.HasValue ?
                new ObjectParameter("Importe", importe) :
                new ObjectParameter("Importe", typeof(double));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("Concepto", concepto) :
                new ObjectParameter("Concepto", typeof(string));
    
            var subsidioCausadoParameter = subsidioCausado != null ?
                new ObjectParameter("SubsidioCausado", subsidioCausado) :
                new ObjectParameter("SubsidioCausado", typeof(string));
    
            var saldoAFavorParameter = saldoAFavor.HasValue ?
                new ObjectParameter("SaldoAFavor", saldoAFavor) :
                new ObjectParameter("SaldoAFavor", typeof(double));
    
            var añoParameter = año.HasValue ?
                new ObjectParameter("Año", año) :
                new ObjectParameter("Año", typeof(int));
    
            var remanenteSalFavParameter = remanenteSalFav.HasValue ?
                new ObjectParameter("RemanenteSalFav", remanenteSalFav) :
                new ObjectParameter("RemanenteSalFav", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertNominaOtrosPagos", idParameter, idNominaHistorialParameter, tipoParameter, importeParameter, conceptoParameter, subsidioCausadoParameter, saldoAFavorParameter, añoParameter, remanenteSalFavParameter);
        }
    
        public virtual int InsertNominaPercepcion(Nullable<System.Guid> id, Nullable<System.Guid> idPercepciones, string tipo, string clave, string concepto, Nullable<double> importeExcento, Nullable<double> importeGravado, Nullable<double> valorMercado, Nullable<double> precioOrtorgarse, Nullable<System.DateTime> fechaCreacion, Nullable<System.Guid> usuarioCreacion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idPercepcionesParameter = idPercepciones.HasValue ?
                new ObjectParameter("IdPercepciones", idPercepciones) :
                new ObjectParameter("IdPercepciones", typeof(System.Guid));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var claveParameter = clave != null ?
                new ObjectParameter("Clave", clave) :
                new ObjectParameter("Clave", typeof(string));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("Concepto", concepto) :
                new ObjectParameter("Concepto", typeof(string));
    
            var importeExcentoParameter = importeExcento.HasValue ?
                new ObjectParameter("ImporteExcento", importeExcento) :
                new ObjectParameter("ImporteExcento", typeof(double));
    
            var importeGravadoParameter = importeGravado.HasValue ?
                new ObjectParameter("ImporteGravado", importeGravado) :
                new ObjectParameter("ImporteGravado", typeof(double));
    
            var valorMercadoParameter = valorMercado.HasValue ?
                new ObjectParameter("ValorMercado", valorMercado) :
                new ObjectParameter("ValorMercado", typeof(double));
    
            var precioOrtorgarseParameter = precioOrtorgarse.HasValue ?
                new ObjectParameter("PrecioOrtorgarse", precioOrtorgarse) :
                new ObjectParameter("PrecioOrtorgarse", typeof(double));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertNominaPercepcion", idParameter, idPercepcionesParameter, tipoParameter, claveParameter, conceptoParameter, importeExcentoParameter, importeGravadoParameter, valorMercadoParameter, precioOrtorgarseParameter, fechaCreacionParameter, usuarioCreacionParameter);
        }
    
        public virtual int InsertNominaPercepciones(Nullable<System.Guid> id, Nullable<System.Guid> idSeparacionIndemnizacion, Nullable<System.Guid> idJubilacionPensionRetiro, Nullable<System.DateTime> fechaCreacion, Nullable<System.Guid> usuarioCreacion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idSeparacionIndemnizacionParameter = idSeparacionIndemnizacion.HasValue ?
                new ObjectParameter("IdSeparacionIndemnizacion", idSeparacionIndemnizacion) :
                new ObjectParameter("IdSeparacionIndemnizacion", typeof(System.Guid));
    
            var idJubilacionPensionRetiroParameter = idJubilacionPensionRetiro.HasValue ?
                new ObjectParameter("IdJubilacionPensionRetiro", idJubilacionPensionRetiro) :
                new ObjectParameter("IdJubilacionPensionRetiro", typeof(System.Guid));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertNominaPercepciones", idParameter, idSeparacionIndemnizacionParameter, idJubilacionPensionRetiroParameter, fechaCreacionParameter, usuarioCreacionParameter);
        }
    
        public virtual int InsertNominaSeparacionIndemnizacion(Nullable<System.Guid> id, Nullable<double> totalPagado, Nullable<int> numAñosServicio, Nullable<double> ultimoSueldoMensOrd, Nullable<double> ingresoAcumulable, Nullable<double> ingresoNoAcumulable, Nullable<System.DateTime> fechaCreacion, Nullable<System.Guid> usuarioCreacion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var totalPagadoParameter = totalPagado.HasValue ?
                new ObjectParameter("TotalPagado", totalPagado) :
                new ObjectParameter("TotalPagado", typeof(double));
    
            var numAñosServicioParameter = numAñosServicio.HasValue ?
                new ObjectParameter("NumAñosServicio", numAñosServicio) :
                new ObjectParameter("NumAñosServicio", typeof(int));
    
            var ultimoSueldoMensOrdParameter = ultimoSueldoMensOrd.HasValue ?
                new ObjectParameter("UltimoSueldoMensOrd", ultimoSueldoMensOrd) :
                new ObjectParameter("UltimoSueldoMensOrd", typeof(double));
    
            var ingresoAcumulableParameter = ingresoAcumulable.HasValue ?
                new ObjectParameter("IngresoAcumulable", ingresoAcumulable) :
                new ObjectParameter("IngresoAcumulable", typeof(double));
    
            var ingresoNoAcumulableParameter = ingresoNoAcumulable.HasValue ?
                new ObjectParameter("IngresoNoAcumulable", ingresoNoAcumulable) :
                new ObjectParameter("IngresoNoAcumulable", typeof(double));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertNominaSeparacionIndemnizacion", idParameter, totalPagadoParameter, numAñosServicioParameter, ultimoSueldoMensOrdParameter, ingresoAcumulableParameter, ingresoNoAcumulableParameter, fechaCreacionParameter, usuarioCreacionParameter);
        }
    
        public virtual int InsertReporteLlamada(Nullable<System.Guid> id, Nullable<System.Guid> idIncidente, Nullable<System.Guid> idClienteContacto, string comentarios, Nullable<System.DateTime> fechaHoraInicio, Nullable<System.DateTime> fechaHoraFin, string llamada, string estatus, Nullable<bool> activo, Nullable<System.DateTime> fechaCreacion, Nullable<System.Guid> usuarioCreacion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idIncidenteParameter = idIncidente.HasValue ?
                new ObjectParameter("IdIncidente", idIncidente) :
                new ObjectParameter("IdIncidente", typeof(System.Guid));
    
            var idClienteContactoParameter = idClienteContacto.HasValue ?
                new ObjectParameter("IdClienteContacto", idClienteContacto) :
                new ObjectParameter("IdClienteContacto", typeof(System.Guid));
    
            var comentariosParameter = comentarios != null ?
                new ObjectParameter("Comentarios", comentarios) :
                new ObjectParameter("Comentarios", typeof(string));
    
            var fechaHoraInicioParameter = fechaHoraInicio.HasValue ?
                new ObjectParameter("FechaHoraInicio", fechaHoraInicio) :
                new ObjectParameter("FechaHoraInicio", typeof(System.DateTime));
    
            var fechaHoraFinParameter = fechaHoraFin.HasValue ?
                new ObjectParameter("FechaHoraFin", fechaHoraFin) :
                new ObjectParameter("FechaHoraFin", typeof(System.DateTime));
    
            var llamadaParameter = llamada != null ?
                new ObjectParameter("Llamada", llamada) :
                new ObjectParameter("Llamada", typeof(string));
    
            var estatusParameter = estatus != null ?
                new ObjectParameter("Estatus", estatus) :
                new ObjectParameter("Estatus", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertReporteLlamada", idParameter, idIncidenteParameter, idClienteContactoParameter, comentariosParameter, fechaHoraInicioParameter, fechaHoraFinParameter, llamadaParameter, estatusParameter, activoParameter, fechaCreacionParameter, usuarioCreacionParameter);
        }
    
        public virtual int InsertSensores(Nullable<System.Guid> id, Nullable<System.Guid> idCliente, string numeroDeSensor, string tipoSensor, string ubicacion, Nullable<System.DateTime> fechaCreacion, Nullable<System.Guid> usuarioCreacion, Nullable<bool> activo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(System.Guid));
    
            var numeroDeSensorParameter = numeroDeSensor != null ?
                new ObjectParameter("NumeroDeSensor", numeroDeSensor) :
                new ObjectParameter("NumeroDeSensor", typeof(string));
    
            var tipoSensorParameter = tipoSensor != null ?
                new ObjectParameter("TipoSensor", tipoSensor) :
                new ObjectParameter("TipoSensor", typeof(string));
    
            var ubicacionParameter = ubicacion != null ?
                new ObjectParameter("Ubicacion", ubicacion) :
                new ObjectParameter("Ubicacion", typeof(string));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(System.Guid));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSensores", idParameter, idClienteParameter, numeroDeSensorParameter, tipoSensorParameter, ubicacionParameter, fechaCreacionParameter, usuarioCreacionParameter, activoParameter);
        }
    
        public virtual int InsertTipoUsuarios(string nombre, string descripcion, string activo, Nullable<System.DateTime> fecha, string usuario)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var activoParameter = activo != null ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTipoUsuarios", nombreParameter, descripcionParameter, activoParameter, fechaParameter, usuarioParameter);
        }
    
        public virtual int InsertUsuario(Nullable<System.Guid> id, string usuario, string contraseña, string tipoUsuario, string roles, Nullable<bool> activo, Nullable<int> timbres, Nullable<int> timbresUsados, Nullable<int> timbresCancelados, Nullable<bool> primeraVez)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var contraseñaParameter = contraseña != null ?
                new ObjectParameter("Contraseña", contraseña) :
                new ObjectParameter("Contraseña", typeof(string));
    
            var tipoUsuarioParameter = tipoUsuario != null ?
                new ObjectParameter("TipoUsuario", tipoUsuario) :
                new ObjectParameter("TipoUsuario", typeof(string));
    
            var rolesParameter = roles != null ?
                new ObjectParameter("Roles", roles) :
                new ObjectParameter("Roles", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var timbresParameter = timbres.HasValue ?
                new ObjectParameter("Timbres", timbres) :
                new ObjectParameter("Timbres", typeof(int));
    
            var timbresUsadosParameter = timbresUsados.HasValue ?
                new ObjectParameter("TimbresUsados", timbresUsados) :
                new ObjectParameter("TimbresUsados", typeof(int));
    
            var timbresCanceladosParameter = timbresCancelados.HasValue ?
                new ObjectParameter("TimbresCancelados", timbresCancelados) :
                new ObjectParameter("TimbresCancelados", typeof(int));
    
            var primeraVezParameter = primeraVez.HasValue ?
                new ObjectParameter("PrimeraVez", primeraVez) :
                new ObjectParameter("PrimeraVez", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUsuario", idParameter, usuarioParameter, contraseñaParameter, tipoUsuarioParameter, rolesParameter, activoParameter, timbresParameter, timbresUsadosParameter, timbresCanceladosParameter, primeraVezParameter);
        }
    
        public virtual ObjectResult<GetPAC_Result> GetPAC(Nullable<System.Guid> id, Nullable<int> opcion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPAC_Result>("GetPAC", idParameter, opcionParameter);
        }
    
        public virtual int DeleteClaveProdServPorPAC(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteClaveProdServPorPAC", idParameter);
        }
    
        public virtual int DeleteClienteContactos(Nullable<int> op, Nullable<System.Guid> id)
        {
            var opParameter = op.HasValue ?
                new ObjectParameter("op", op) :
                new ObjectParameter("op", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteClienteContactos", opParameter, idParameter);
        }
    
        public virtual int DeleteClientes(Nullable<System.Guid> id, Nullable<int> opcion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteClientes", idParameter, opcionParameter);
        }
    
        public virtual int DeleteEmpleado(Nullable<int> opcion, Nullable<System.Guid> id)
        {
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEmpleado", opcionParameter, idParameter);
        }
    
        public virtual int DeleteSensores(Nullable<System.Guid> id, Nullable<int> opcion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSensores", idParameter, opcionParameter);
        }
    
        public virtual int UpdateEmpleado(Nullable<System.Guid> id, Nullable<int> noEmpleado, Nullable<System.Guid> idProveedor, string nombre, string apellidoMaterno, string apellidoPaterno, Nullable<System.Guid> idUsuario, string correo, Nullable<System.DateTime> fechaNacimiento, Nullable<System.DateTime> fechaInicioRelLaboral, string rFC, string cURP, byte[] huellaDactilar, string foto, string iNE, string numeroSeguridadSocial, string departamento, string direccion, string puesto, string riesgoPuesto, string tipoContrato, string tipoJornada, Nullable<double> salarioDiario, string banco, string cuentaBancaria, string claveEntFed, string gradoEstudios, string telefono, string telefonoEmergencia, byte[] firma, string tipoSangre, string cUIP, string numeroDeLicencia, string numeroDeAutorizacion, Nullable<System.Guid> idPlantilla, Nullable<bool> activo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var noEmpleadoParameter = noEmpleado.HasValue ?
                new ObjectParameter("NoEmpleado", noEmpleado) :
                new ObjectParameter("NoEmpleado", typeof(int));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(System.Guid));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoMaternoParameter = apellidoMaterno != null ?
                new ObjectParameter("ApellidoMaterno", apellidoMaterno) :
                new ObjectParameter("ApellidoMaterno", typeof(string));
    
            var apellidoPaternoParameter = apellidoPaterno != null ?
                new ObjectParameter("ApellidoPaterno", apellidoPaterno) :
                new ObjectParameter("ApellidoPaterno", typeof(string));
    
            var idUsuarioParameter = idUsuario.HasValue ?
                new ObjectParameter("IdUsuario", idUsuario) :
                new ObjectParameter("IdUsuario", typeof(System.Guid));
    
            var correoParameter = correo != null ?
                new ObjectParameter("Correo", correo) :
                new ObjectParameter("Correo", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var fechaInicioRelLaboralParameter = fechaInicioRelLaboral.HasValue ?
                new ObjectParameter("FechaInicioRelLaboral", fechaInicioRelLaboral) :
                new ObjectParameter("FechaInicioRelLaboral", typeof(System.DateTime));
    
            var rFCParameter = rFC != null ?
                new ObjectParameter("RFC", rFC) :
                new ObjectParameter("RFC", typeof(string));
    
            var cURPParameter = cURP != null ?
                new ObjectParameter("CURP", cURP) :
                new ObjectParameter("CURP", typeof(string));
    
            var huellaDactilarParameter = huellaDactilar != null ?
                new ObjectParameter("HuellaDactilar", huellaDactilar) :
                new ObjectParameter("HuellaDactilar", typeof(byte[]));
    
            var fotoParameter = foto != null ?
                new ObjectParameter("Foto", foto) :
                new ObjectParameter("Foto", typeof(string));
    
            var iNEParameter = iNE != null ?
                new ObjectParameter("INE", iNE) :
                new ObjectParameter("INE", typeof(string));
    
            var numeroSeguridadSocialParameter = numeroSeguridadSocial != null ?
                new ObjectParameter("NumeroSeguridadSocial", numeroSeguridadSocial) :
                new ObjectParameter("NumeroSeguridadSocial", typeof(string));
    
            var departamentoParameter = departamento != null ?
                new ObjectParameter("Departamento", departamento) :
                new ObjectParameter("Departamento", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var puestoParameter = puesto != null ?
                new ObjectParameter("Puesto", puesto) :
                new ObjectParameter("Puesto", typeof(string));
    
            var riesgoPuestoParameter = riesgoPuesto != null ?
                new ObjectParameter("RiesgoPuesto", riesgoPuesto) :
                new ObjectParameter("RiesgoPuesto", typeof(string));
    
            var tipoContratoParameter = tipoContrato != null ?
                new ObjectParameter("TipoContrato", tipoContrato) :
                new ObjectParameter("TipoContrato", typeof(string));
    
            var tipoJornadaParameter = tipoJornada != null ?
                new ObjectParameter("TipoJornada", tipoJornada) :
                new ObjectParameter("TipoJornada", typeof(string));
    
            var salarioDiarioParameter = salarioDiario.HasValue ?
                new ObjectParameter("SalarioDiario", salarioDiario) :
                new ObjectParameter("SalarioDiario", typeof(double));
    
            var bancoParameter = banco != null ?
                new ObjectParameter("Banco", banco) :
                new ObjectParameter("Banco", typeof(string));
    
            var cuentaBancariaParameter = cuentaBancaria != null ?
                new ObjectParameter("CuentaBancaria", cuentaBancaria) :
                new ObjectParameter("CuentaBancaria", typeof(string));
    
            var claveEntFedParameter = claveEntFed != null ?
                new ObjectParameter("ClaveEntFed", claveEntFed) :
                new ObjectParameter("ClaveEntFed", typeof(string));
    
            var gradoEstudiosParameter = gradoEstudios != null ?
                new ObjectParameter("GradoEstudios", gradoEstudios) :
                new ObjectParameter("GradoEstudios", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var telefonoEmergenciaParameter = telefonoEmergencia != null ?
                new ObjectParameter("TelefonoEmergencia", telefonoEmergencia) :
                new ObjectParameter("TelefonoEmergencia", typeof(string));
    
            var firmaParameter = firma != null ?
                new ObjectParameter("Firma", firma) :
                new ObjectParameter("Firma", typeof(byte[]));
    
            var tipoSangreParameter = tipoSangre != null ?
                new ObjectParameter("TipoSangre", tipoSangre) :
                new ObjectParameter("TipoSangre", typeof(string));
    
            var cUIPParameter = cUIP != null ?
                new ObjectParameter("CUIP", cUIP) :
                new ObjectParameter("CUIP", typeof(string));
    
            var numeroDeLicenciaParameter = numeroDeLicencia != null ?
                new ObjectParameter("NumeroDeLicencia", numeroDeLicencia) :
                new ObjectParameter("NumeroDeLicencia", typeof(string));
    
            var numeroDeAutorizacionParameter = numeroDeAutorizacion != null ?
                new ObjectParameter("NumeroDeAutorizacion", numeroDeAutorizacion) :
                new ObjectParameter("NumeroDeAutorizacion", typeof(string));
    
            var idPlantillaParameter = idPlantilla.HasValue ?
                new ObjectParameter("IdPlantilla", idPlantilla) :
                new ObjectParameter("IdPlantilla", typeof(System.Guid));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmpleado", idParameter, noEmpleadoParameter, idProveedorParameter, nombreParameter, apellidoMaternoParameter, apellidoPaternoParameter, idUsuarioParameter, correoParameter, fechaNacimientoParameter, fechaInicioRelLaboralParameter, rFCParameter, cURPParameter, huellaDactilarParameter, fotoParameter, iNEParameter, numeroSeguridadSocialParameter, departamentoParameter, direccionParameter, puestoParameter, riesgoPuestoParameter, tipoContratoParameter, tipoJornadaParameter, salarioDiarioParameter, bancoParameter, cuentaBancariaParameter, claveEntFedParameter, gradoEstudiosParameter, telefonoParameter, telefonoEmergenciaParameter, firmaParameter, tipoSangreParameter, cUIPParameter, numeroDeLicenciaParameter, numeroDeAutorizacionParameter, idPlantillaParameter, activoParameter);
        }
    
        public virtual int UpdateMonitoreoIngresos(Nullable<System.Guid> idIngreso, Nullable<System.Guid> idAdeudo, Nullable<double> cargos, Nullable<double> abonos, Nullable<double> cargosUSD, Nullable<double> abonosUSD, Nullable<double> tipoCambio, string metodoDePago, string formaDePago, string usoCFDI, string moneda, string comentario)
        {
            var idIngresoParameter = idIngreso.HasValue ?
                new ObjectParameter("IdIngreso", idIngreso) :
                new ObjectParameter("IdIngreso", typeof(System.Guid));
    
            var idAdeudoParameter = idAdeudo.HasValue ?
                new ObjectParameter("IdAdeudo", idAdeudo) :
                new ObjectParameter("IdAdeudo", typeof(System.Guid));
    
            var cargosParameter = cargos.HasValue ?
                new ObjectParameter("Cargos", cargos) :
                new ObjectParameter("Cargos", typeof(double));
    
            var abonosParameter = abonos.HasValue ?
                new ObjectParameter("Abonos", abonos) :
                new ObjectParameter("Abonos", typeof(double));
    
            var cargosUSDParameter = cargosUSD.HasValue ?
                new ObjectParameter("CargosUSD", cargosUSD) :
                new ObjectParameter("CargosUSD", typeof(double));
    
            var abonosUSDParameter = abonosUSD.HasValue ?
                new ObjectParameter("AbonosUSD", abonosUSD) :
                new ObjectParameter("AbonosUSD", typeof(double));
    
            var tipoCambioParameter = tipoCambio.HasValue ?
                new ObjectParameter("TipoCambio", tipoCambio) :
                new ObjectParameter("TipoCambio", typeof(double));
    
            var metodoDePagoParameter = metodoDePago != null ?
                new ObjectParameter("MetodoDePago", metodoDePago) :
                new ObjectParameter("MetodoDePago", typeof(string));
    
            var formaDePagoParameter = formaDePago != null ?
                new ObjectParameter("FormaDePago", formaDePago) :
                new ObjectParameter("FormaDePago", typeof(string));
    
            var usoCFDIParameter = usoCFDI != null ?
                new ObjectParameter("UsoCFDI", usoCFDI) :
                new ObjectParameter("UsoCFDI", typeof(string));
    
            var monedaParameter = moneda != null ?
                new ObjectParameter("Moneda", moneda) :
                new ObjectParameter("Moneda", typeof(string));
    
            var comentarioParameter = comentario != null ?
                new ObjectParameter("Comentario", comentario) :
                new ObjectParameter("Comentario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMonitoreoIngresos", idIngresoParameter, idAdeudoParameter, cargosParameter, abonosParameter, cargosUSDParameter, abonosUSDParameter, tipoCambioParameter, metodoDePagoParameter, formaDePagoParameter, usoCFDIParameter, monedaParameter, comentarioParameter);
        }
    
        public virtual int UpdateNominaDeduccion(Nullable<System.Guid> id, string tipo, string clave, string concepto, Nullable<double> importe)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var claveParameter = clave != null ?
                new ObjectParameter("Clave", clave) :
                new ObjectParameter("Clave", typeof(string));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("Concepto", concepto) :
                new ObjectParameter("Concepto", typeof(string));
    
            var importeParameter = importe.HasValue ?
                new ObjectParameter("Importe", importe) :
                new ObjectParameter("Importe", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateNominaDeduccion", idParameter, tipoParameter, claveParameter, conceptoParameter, importeParameter);
        }
    
        public virtual int UpdateNominaHistorial(Nullable<System.Guid> idNominaHistorial, Nullable<System.Guid> idProveedor, Nullable<System.Guid> idEmpleado, string formaPago, string tipoNomina, Nullable<System.DateTime> fechaPago, Nullable<System.DateTime> fechaInicialPago, Nullable<System.DateTime> fechaFinalPago, Nullable<double> numeroDiasPagados, string tipoRegimen, string moneda, string periodicidadPago, string lugarExpedicion, Nullable<System.DateTime> fechaCreeacion, string usuarioCreacion)
        {
            var idNominaHistorialParameter = idNominaHistorial.HasValue ?
                new ObjectParameter("IdNominaHistorial", idNominaHistorial) :
                new ObjectParameter("IdNominaHistorial", typeof(System.Guid));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(System.Guid));
    
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("IdEmpleado", idEmpleado) :
                new ObjectParameter("IdEmpleado", typeof(System.Guid));
    
            var formaPagoParameter = formaPago != null ?
                new ObjectParameter("FormaPago", formaPago) :
                new ObjectParameter("FormaPago", typeof(string));
    
            var tipoNominaParameter = tipoNomina != null ?
                new ObjectParameter("TipoNomina", tipoNomina) :
                new ObjectParameter("TipoNomina", typeof(string));
    
            var fechaPagoParameter = fechaPago.HasValue ?
                new ObjectParameter("FechaPago", fechaPago) :
                new ObjectParameter("FechaPago", typeof(System.DateTime));
    
            var fechaInicialPagoParameter = fechaInicialPago.HasValue ?
                new ObjectParameter("FechaInicialPago", fechaInicialPago) :
                new ObjectParameter("FechaInicialPago", typeof(System.DateTime));
    
            var fechaFinalPagoParameter = fechaFinalPago.HasValue ?
                new ObjectParameter("FechaFinalPago", fechaFinalPago) :
                new ObjectParameter("FechaFinalPago", typeof(System.DateTime));
    
            var numeroDiasPagadosParameter = numeroDiasPagados.HasValue ?
                new ObjectParameter("NumeroDiasPagados", numeroDiasPagados) :
                new ObjectParameter("NumeroDiasPagados", typeof(double));
    
            var tipoRegimenParameter = tipoRegimen != null ?
                new ObjectParameter("TipoRegimen", tipoRegimen) :
                new ObjectParameter("TipoRegimen", typeof(string));
    
            var monedaParameter = moneda != null ?
                new ObjectParameter("Moneda", moneda) :
                new ObjectParameter("Moneda", typeof(string));
    
            var periodicidadPagoParameter = periodicidadPago != null ?
                new ObjectParameter("PeriodicidadPago", periodicidadPago) :
                new ObjectParameter("PeriodicidadPago", typeof(string));
    
            var lugarExpedicionParameter = lugarExpedicion != null ?
                new ObjectParameter("LugarExpedicion", lugarExpedicion) :
                new ObjectParameter("LugarExpedicion", typeof(string));
    
            var fechaCreeacionParameter = fechaCreeacion.HasValue ?
                new ObjectParameter("FechaCreeacion", fechaCreeacion) :
                new ObjectParameter("FechaCreeacion", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion != null ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateNominaHistorial", idNominaHistorialParameter, idProveedorParameter, idEmpleadoParameter, formaPagoParameter, tipoNominaParameter, fechaPagoParameter, fechaInicialPagoParameter, fechaFinalPagoParameter, numeroDiasPagadosParameter, tipoRegimenParameter, monedaParameter, periodicidadPagoParameter, lugarExpedicionParameter, fechaCreeacionParameter, usuarioCreacionParameter);
        }
    
        public virtual int UpdateNominaHorasExtras(Nullable<System.Guid> id, Nullable<double> dias, string tipo, Nullable<double> horasExtras, Nullable<double> importePagado)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var diasParameter = dias.HasValue ?
                new ObjectParameter("Dias", dias) :
                new ObjectParameter("Dias", typeof(double));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var horasExtrasParameter = horasExtras.HasValue ?
                new ObjectParameter("HorasExtras", horasExtras) :
                new ObjectParameter("HorasExtras", typeof(double));
    
            var importePagadoParameter = importePagado.HasValue ?
                new ObjectParameter("ImportePagado", importePagado) :
                new ObjectParameter("ImportePagado", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateNominaHorasExtras", idParameter, diasParameter, tipoParameter, horasExtrasParameter, importePagadoParameter);
        }
    
        public virtual int UpdateNominaIncapacidad(Nullable<System.Guid> id, Nullable<double> diasIncapacidad, string tipo, Nullable<double> importe)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var diasIncapacidadParameter = diasIncapacidad.HasValue ?
                new ObjectParameter("DiasIncapacidad", diasIncapacidad) :
                new ObjectParameter("DiasIncapacidad", typeof(double));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var importeParameter = importe.HasValue ?
                new ObjectParameter("Importe", importe) :
                new ObjectParameter("Importe", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateNominaIncapacidad", idParameter, diasIncapacidadParameter, tipoParameter, importeParameter);
        }
    
        public virtual int UpdateNominaJubilacionPensionRetiro(Nullable<System.Guid> id, Nullable<double> totalUnaExhibicion, Nullable<double> totalParcialidad, Nullable<double> montoDiario, Nullable<double> ingresoAcumulable, Nullable<double> ingresoNoAcumulable)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var totalUnaExhibicionParameter = totalUnaExhibicion.HasValue ?
                new ObjectParameter("TotalUnaExhibicion", totalUnaExhibicion) :
                new ObjectParameter("TotalUnaExhibicion", typeof(double));
    
            var totalParcialidadParameter = totalParcialidad.HasValue ?
                new ObjectParameter("TotalParcialidad", totalParcialidad) :
                new ObjectParameter("TotalParcialidad", typeof(double));
    
            var montoDiarioParameter = montoDiario.HasValue ?
                new ObjectParameter("MontoDiario", montoDiario) :
                new ObjectParameter("MontoDiario", typeof(double));
    
            var ingresoAcumulableParameter = ingresoAcumulable.HasValue ?
                new ObjectParameter("IngresoAcumulable", ingresoAcumulable) :
                new ObjectParameter("IngresoAcumulable", typeof(double));
    
            var ingresoNoAcumulableParameter = ingresoNoAcumulable.HasValue ?
                new ObjectParameter("IngresoNoAcumulable", ingresoNoAcumulable) :
                new ObjectParameter("IngresoNoAcumulable", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateNominaJubilacionPensionRetiro", idParameter, totalUnaExhibicionParameter, totalParcialidadParameter, montoDiarioParameter, ingresoAcumulableParameter, ingresoNoAcumulableParameter);
        }
    
        public virtual int UpdateNominaOtrosPago(Nullable<System.Guid> id, string tipo, string clave, string concepto, Nullable<double> importe, string subsidioCausado, Nullable<double> saldoAFavor, Nullable<int> año, Nullable<double> remanenteSaldoAFavor)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var claveParameter = clave != null ?
                new ObjectParameter("Clave", clave) :
                new ObjectParameter("Clave", typeof(string));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("Concepto", concepto) :
                new ObjectParameter("Concepto", typeof(string));
    
            var importeParameter = importe.HasValue ?
                new ObjectParameter("Importe", importe) :
                new ObjectParameter("Importe", typeof(double));
    
            var subsidioCausadoParameter = subsidioCausado != null ?
                new ObjectParameter("SubsidioCausado", subsidioCausado) :
                new ObjectParameter("SubsidioCausado", typeof(string));
    
            var saldoAFavorParameter = saldoAFavor.HasValue ?
                new ObjectParameter("SaldoAFavor", saldoAFavor) :
                new ObjectParameter("SaldoAFavor", typeof(double));
    
            var añoParameter = año.HasValue ?
                new ObjectParameter("Año", año) :
                new ObjectParameter("Año", typeof(int));
    
            var remanenteSaldoAFavorParameter = remanenteSaldoAFavor.HasValue ?
                new ObjectParameter("RemanenteSaldoAFavor", remanenteSaldoAFavor) :
                new ObjectParameter("RemanenteSaldoAFavor", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateNominaOtrosPago", idParameter, tipoParameter, claveParameter, conceptoParameter, importeParameter, subsidioCausadoParameter, saldoAFavorParameter, añoParameter, remanenteSaldoAFavorParameter);
        }
    
        public virtual int UpdateNominaPercepcion(Nullable<System.Guid> id, string tipo, string clave, string concepto, Nullable<double> importeExcento, Nullable<double> importeGravado, Nullable<double> valorMercado, Nullable<double> precioOrtorgarse)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var claveParameter = clave != null ?
                new ObjectParameter("Clave", clave) :
                new ObjectParameter("Clave", typeof(string));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("Concepto", concepto) :
                new ObjectParameter("Concepto", typeof(string));
    
            var importeExcentoParameter = importeExcento.HasValue ?
                new ObjectParameter("ImporteExcento", importeExcento) :
                new ObjectParameter("ImporteExcento", typeof(double));
    
            var importeGravadoParameter = importeGravado.HasValue ?
                new ObjectParameter("ImporteGravado", importeGravado) :
                new ObjectParameter("ImporteGravado", typeof(double));
    
            var valorMercadoParameter = valorMercado.HasValue ?
                new ObjectParameter("ValorMercado", valorMercado) :
                new ObjectParameter("ValorMercado", typeof(double));
    
            var precioOrtorgarseParameter = precioOrtorgarse.HasValue ?
                new ObjectParameter("PrecioOrtorgarse", precioOrtorgarse) :
                new ObjectParameter("PrecioOrtorgarse", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateNominaPercepcion", idParameter, tipoParameter, claveParameter, conceptoParameter, importeExcentoParameter, importeGravadoParameter, valorMercadoParameter, precioOrtorgarseParameter);
        }
    
        public virtual int UpdateNominaPercepciones(Nullable<System.Guid> id, Nullable<System.Guid> idSeparacionIndemnizacion, Nullable<System.Guid> idJubilacionPensionRetiro)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idSeparacionIndemnizacionParameter = idSeparacionIndemnizacion.HasValue ?
                new ObjectParameter("IdSeparacionIndemnizacion", idSeparacionIndemnizacion) :
                new ObjectParameter("IdSeparacionIndemnizacion", typeof(System.Guid));
    
            var idJubilacionPensionRetiroParameter = idJubilacionPensionRetiro.HasValue ?
                new ObjectParameter("IdJubilacionPensionRetiro", idJubilacionPensionRetiro) :
                new ObjectParameter("IdJubilacionPensionRetiro", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateNominaPercepciones", idParameter, idSeparacionIndemnizacionParameter, idJubilacionPensionRetiroParameter);
        }
    
        public virtual int UpdateNominaSeparacionIndemnizacion(Nullable<System.Guid> id, Nullable<double> totalPagado, Nullable<int> numAñosServicio, Nullable<double> ultimoSueldoMensOrd, Nullable<double> ingresoAcumulable, Nullable<double> ingresoNoAcumulable)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var totalPagadoParameter = totalPagado.HasValue ?
                new ObjectParameter("TotalPagado", totalPagado) :
                new ObjectParameter("TotalPagado", typeof(double));
    
            var numAñosServicioParameter = numAñosServicio.HasValue ?
                new ObjectParameter("NumAñosServicio", numAñosServicio) :
                new ObjectParameter("NumAñosServicio", typeof(int));
    
            var ultimoSueldoMensOrdParameter = ultimoSueldoMensOrd.HasValue ?
                new ObjectParameter("UltimoSueldoMensOrd", ultimoSueldoMensOrd) :
                new ObjectParameter("UltimoSueldoMensOrd", typeof(double));
    
            var ingresoAcumulableParameter = ingresoAcumulable.HasValue ?
                new ObjectParameter("IngresoAcumulable", ingresoAcumulable) :
                new ObjectParameter("IngresoAcumulable", typeof(double));
    
            var ingresoNoAcumulableParameter = ingresoNoAcumulable.HasValue ?
                new ObjectParameter("IngresoNoAcumulable", ingresoNoAcumulable) :
                new ObjectParameter("IngresoNoAcumulable", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateNominaSeparacionIndemnizacion", idParameter, totalPagadoParameter, numAñosServicioParameter, ultimoSueldoMensOrdParameter, ingresoAcumulableParameter, ingresoNoAcumulableParameter);
        }
    
        public virtual int UpdateSensores(Nullable<System.Guid> id, Nullable<System.Guid> idCliente, string numeroDeSensor, string tipoSensor, string ubicacion, Nullable<System.DateTime> fechaCreacion, Nullable<System.Guid> usuarioCreacion, Nullable<bool> activo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(System.Guid));
    
            var numeroDeSensorParameter = numeroDeSensor != null ?
                new ObjectParameter("NumeroDeSensor", numeroDeSensor) :
                new ObjectParameter("NumeroDeSensor", typeof(string));
    
            var tipoSensorParameter = tipoSensor != null ?
                new ObjectParameter("TipoSensor", tipoSensor) :
                new ObjectParameter("TipoSensor", typeof(string));
    
            var ubicacionParameter = ubicacion != null ?
                new ObjectParameter("Ubicacion", ubicacion) :
                new ObjectParameter("Ubicacion", typeof(string));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(System.Guid));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSensores", idParameter, idClienteParameter, numeroDeSensorParameter, tipoSensorParameter, ubicacionParameter, fechaCreacionParameter, usuarioCreacionParameter, activoParameter);
        }
    
        public virtual int UpdateUsuarios(Nullable<System.Guid> id, string usuario, string contrasena, string tipoUsuario, string roles, Nullable<bool> activo, Nullable<int> timbres, Nullable<int> timbresUsados, Nullable<int> timbresCancelados, Nullable<bool> primeraVez)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            var tipoUsuarioParameter = tipoUsuario != null ?
                new ObjectParameter("TipoUsuario", tipoUsuario) :
                new ObjectParameter("TipoUsuario", typeof(string));
    
            var rolesParameter = roles != null ?
                new ObjectParameter("Roles", roles) :
                new ObjectParameter("Roles", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var timbresParameter = timbres.HasValue ?
                new ObjectParameter("Timbres", timbres) :
                new ObjectParameter("Timbres", typeof(int));
    
            var timbresUsadosParameter = timbresUsados.HasValue ?
                new ObjectParameter("TimbresUsados", timbresUsados) :
                new ObjectParameter("TimbresUsados", typeof(int));
    
            var timbresCanceladosParameter = timbresCancelados.HasValue ?
                new ObjectParameter("TimbresCancelados", timbresCancelados) :
                new ObjectParameter("TimbresCancelados", typeof(int));
    
            var primeraVezParameter = primeraVez.HasValue ?
                new ObjectParameter("PrimeraVez", primeraVez) :
                new ObjectParameter("PrimeraVez", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUsuarios", idParameter, usuarioParameter, contrasenaParameter, tipoUsuarioParameter, rolesParameter, activoParameter, timbresParameter, timbresUsadosParameter, timbresCanceladosParameter, primeraVezParameter);
        }
    
        public virtual int UpdateAdeudosInstalaciones(Nullable<System.Guid> id, Nullable<System.Guid> idProveedor, Nullable<System.Guid> idCliente, Nullable<System.Guid> idPaquete, Nullable<System.DateTime> fechaContrato, Nullable<bool> pagoComision, Nullable<System.DateTime> fechaPago, Nullable<System.Guid> idAsesor, Nullable<System.Guid> idMensualidad, Nullable<int> cantidad, string concepto, string descripcion, string unidad, Nullable<double> total, string claveProdServ, Nullable<System.DateTime> fechaInstalacion, Nullable<System.Guid> idInstalador, string comentarios, Nullable<double> anticipo, Nullable<bool> pagado, Nullable<bool> instalacion, Nullable<bool> requiereFacturacion, Nullable<bool> requiereCancelacion, Nullable<bool> requiereEnvio, Nullable<bool> revisoRobot, Nullable<bool> activo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(System.Guid));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(System.Guid));
    
            var idPaqueteParameter = idPaquete.HasValue ?
                new ObjectParameter("IdPaquete", idPaquete) :
                new ObjectParameter("IdPaquete", typeof(System.Guid));
    
            var fechaContratoParameter = fechaContrato.HasValue ?
                new ObjectParameter("FechaContrato", fechaContrato) :
                new ObjectParameter("FechaContrato", typeof(System.DateTime));
    
            var pagoComisionParameter = pagoComision.HasValue ?
                new ObjectParameter("PagoComision", pagoComision) :
                new ObjectParameter("PagoComision", typeof(bool));
    
            var fechaPagoParameter = fechaPago.HasValue ?
                new ObjectParameter("FechaPago", fechaPago) :
                new ObjectParameter("FechaPago", typeof(System.DateTime));
    
            var idAsesorParameter = idAsesor.HasValue ?
                new ObjectParameter("IdAsesor", idAsesor) :
                new ObjectParameter("IdAsesor", typeof(System.Guid));
    
            var idMensualidadParameter = idMensualidad.HasValue ?
                new ObjectParameter("IdMensualidad", idMensualidad) :
                new ObjectParameter("IdMensualidad", typeof(System.Guid));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("Concepto", concepto) :
                new ObjectParameter("Concepto", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var unidadParameter = unidad != null ?
                new ObjectParameter("Unidad", unidad) :
                new ObjectParameter("Unidad", typeof(string));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(double));
    
            var claveProdServParameter = claveProdServ != null ?
                new ObjectParameter("ClaveProdServ", claveProdServ) :
                new ObjectParameter("ClaveProdServ", typeof(string));
    
            var fechaInstalacionParameter = fechaInstalacion.HasValue ?
                new ObjectParameter("FechaInstalacion", fechaInstalacion) :
                new ObjectParameter("FechaInstalacion", typeof(System.DateTime));
    
            var idInstaladorParameter = idInstalador.HasValue ?
                new ObjectParameter("IdInstalador", idInstalador) :
                new ObjectParameter("IdInstalador", typeof(System.Guid));
    
            var comentariosParameter = comentarios != null ?
                new ObjectParameter("Comentarios", comentarios) :
                new ObjectParameter("Comentarios", typeof(string));
    
            var anticipoParameter = anticipo.HasValue ?
                new ObjectParameter("Anticipo", anticipo) :
                new ObjectParameter("Anticipo", typeof(double));
    
            var pagadoParameter = pagado.HasValue ?
                new ObjectParameter("Pagado", pagado) :
                new ObjectParameter("Pagado", typeof(bool));
    
            var instalacionParameter = instalacion.HasValue ?
                new ObjectParameter("Instalacion", instalacion) :
                new ObjectParameter("Instalacion", typeof(bool));
    
            var requiereFacturacionParameter = requiereFacturacion.HasValue ?
                new ObjectParameter("RequiereFacturacion", requiereFacturacion) :
                new ObjectParameter("RequiereFacturacion", typeof(bool));
    
            var requiereCancelacionParameter = requiereCancelacion.HasValue ?
                new ObjectParameter("RequiereCancelacion", requiereCancelacion) :
                new ObjectParameter("RequiereCancelacion", typeof(bool));
    
            var requiereEnvioParameter = requiereEnvio.HasValue ?
                new ObjectParameter("RequiereEnvio", requiereEnvio) :
                new ObjectParameter("RequiereEnvio", typeof(bool));
    
            var revisoRobotParameter = revisoRobot.HasValue ?
                new ObjectParameter("RevisoRobot", revisoRobot) :
                new ObjectParameter("RevisoRobot", typeof(bool));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAdeudosInstalaciones", idParameter, idProveedorParameter, idClienteParameter, idPaqueteParameter, fechaContratoParameter, pagoComisionParameter, fechaPagoParameter, idAsesorParameter, idMensualidadParameter, cantidadParameter, conceptoParameter, descripcionParameter, unidadParameter, totalParameter, claveProdServParameter, fechaInstalacionParameter, idInstaladorParameter, comentariosParameter, anticipoParameter, pagadoParameter, instalacionParameter, requiereFacturacionParameter, requiereCancelacionParameter, requiereEnvioParameter, revisoRobotParameter, activoParameter);
        }
    
        public virtual int UpdateCFDI(Nullable<System.Guid> id, string tipo, Nullable<int> folio, byte[] xML, string ruta, Nullable<System.Guid> idCliente, Nullable<System.Guid> idEmpleado, Nullable<System.Guid> idProveedor, Nullable<bool> cancelado)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var folioParameter = folio.HasValue ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(int));
    
            var xMLParameter = xML != null ?
                new ObjectParameter("XML", xML) :
                new ObjectParameter("XML", typeof(byte[]));
    
            var rutaParameter = ruta != null ?
                new ObjectParameter("Ruta", ruta) :
                new ObjectParameter("Ruta", typeof(string));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(System.Guid));
    
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("IdEmpleado", idEmpleado) :
                new ObjectParameter("IdEmpleado", typeof(System.Guid));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(System.Guid));
    
            var canceladoParameter = cancelado.HasValue ?
                new ObjectParameter("Cancelado", cancelado) :
                new ObjectParameter("Cancelado", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCFDI", idParameter, tipoParameter, folioParameter, xMLParameter, rutaParameter, idClienteParameter, idEmpleadoParameter, idProveedorParameter, canceladoParameter);
        }
    
        public virtual ObjectResult<MonitoreoIngresos> GetMonitoreoIngreso(Nullable<int> opcion, Nullable<System.Guid> idIngreso)
        {
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            var idIngresoParameter = idIngreso.HasValue ?
                new ObjectParameter("IdIngreso", idIngreso) :
                new ObjectParameter("IdIngreso", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MonitoreoIngresos>("GetMonitoreoIngreso", opcionParameter, idIngresoParameter);
        }
    
        public virtual ObjectResult<MonitoreoIngresos> GetMonitoreoIngreso(Nullable<int> opcion, Nullable<System.Guid> idIngreso, MergeOption mergeOption)
        {
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            var idIngresoParameter = idIngreso.HasValue ?
                new ObjectParameter("IdIngreso", idIngreso) :
                new ObjectParameter("IdIngreso", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MonitoreoIngresos>("GetMonitoreoIngreso", mergeOption, opcionParameter, idIngresoParameter);
        }
    
        public virtual ObjectResult<CFDI> GetCFDI(Nullable<System.Guid> id, Nullable<int> opcion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CFDI>("GetCFDI", idParameter, opcionParameter);
        }
    
        public virtual ObjectResult<CFDI> GetCFDI(Nullable<System.Guid> id, Nullable<int> opcion, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CFDI>("GetCFDI", mergeOption, idParameter, opcionParameter);
        }
    
        public virtual ObjectResult<GetClaveProdServClase_Result> GetClaveProdServClase(string clase, Nullable<int> opcion)
        {
            var claseParameter = clase != null ?
                new ObjectParameter("Clase", clase) :
                new ObjectParameter("Clase", typeof(string));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClaveProdServClase_Result>("GetClaveProdServClase", claseParameter, opcionParameter);
        }
    
        public virtual ObjectResult<ClienteContactos> GetClienteContactos(Nullable<int> op, Nullable<System.Guid> id)
        {
            var opParameter = op.HasValue ?
                new ObjectParameter("op", op) :
                new ObjectParameter("op", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClienteContactos>("GetClienteContactos", opParameter, idParameter);
        }
    
        public virtual ObjectResult<ClienteContactos> GetClienteContactos(Nullable<int> op, Nullable<System.Guid> id, MergeOption mergeOption)
        {
            var opParameter = op.HasValue ?
                new ObjectParameter("op", op) :
                new ObjectParameter("op", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClienteContactos>("GetClienteContactos", mergeOption, opParameter, idParameter);
        }
    
        public virtual ObjectResult<Clientes> GetClientes(Nullable<System.Guid> id, Nullable<bool> activo, Nullable<int> opcion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Clientes>("GetClientes", idParameter, activoParameter, opcionParameter);
        }
    
        public virtual ObjectResult<Clientes> GetClientes(Nullable<System.Guid> id, Nullable<bool> activo, Nullable<int> opcion, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Clientes>("GetClientes", mergeOption, idParameter, activoParameter, opcionParameter);
        }
    
        public virtual int DeleteAdeudosInstalaciones(Nullable<int> opcion, Nullable<System.Guid> id)
        {
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAdeudosInstalaciones", opcionParameter, idParameter);
        }
    
        public virtual int DeleteMonitoreoIngresos(Nullable<System.Guid> idIngreso, Nullable<int> option)
        {
            var idIngresoParameter = idIngreso.HasValue ?
                new ObjectParameter("IdIngreso", idIngreso) :
                new ObjectParameter("IdIngreso", typeof(System.Guid));
    
            var optionParameter = option.HasValue ?
                new ObjectParameter("Option", option) :
                new ObjectParameter("Option", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMonitoreoIngresos", idIngresoParameter, optionParameter);
        }
    
        public virtual int DeleteNominaDeduccion(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteNominaDeduccion", idParameter);
        }
    
        public virtual int DeleteNominaHistorial(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteNominaHistorial", idParameter);
        }
    
        public virtual int DeleteNominaHorasExtras(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteNominaHorasExtras", idParameter);
        }
    
        public virtual int DeleteNominaIncapacidad(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteNominaIncapacidad", idParameter);
        }
    
        public virtual int DeleteNominaJubilacionPensionRetiro(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteNominaJubilacionPensionRetiro", idParameter);
        }
    
        public virtual int DeleteNominaOtrosPago(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteNominaOtrosPago", idParameter);
        }
    
        public virtual int DeleteNominaPercepcion(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteNominaPercepcion", idParameter);
        }
    
        public virtual int DeleteNominaPercepciones(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteNominaPercepciones", idParameter);
        }
    
        public virtual int DeleteNominaSeparacionIndemnizacion(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteNominaSeparacionIndemnizacion", idParameter);
        }
    
        public virtual int UpdateClienteContactos(Nullable<System.Guid> id, Nullable<System.Guid> idCliente, string nombre, string direccion, string telefono, Nullable<int> prioridad, Nullable<System.DateTime> fechaCreacion, Nullable<System.Guid> usuarioCreacion, Nullable<bool> activo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(System.Guid));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var prioridadParameter = prioridad.HasValue ?
                new ObjectParameter("Prioridad", prioridad) :
                new ObjectParameter("Prioridad", typeof(int));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(System.Guid));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateClienteContactos", idParameter, idClienteParameter, nombreParameter, direccionParameter, telefonoParameter, prioridadParameter, fechaCreacionParameter, usuarioCreacionParameter, activoParameter);
        }
    
        public virtual ObjectResult<AdeudosInstalaciones> GetAdeudosInstalaciones(Nullable<System.Guid> id, Nullable<System.Guid> idCliente, Nullable<int> opcion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(System.Guid));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AdeudosInstalaciones>("GetAdeudosInstalaciones", idParameter, idClienteParameter, opcionParameter);
        }
    
        public virtual ObjectResult<AdeudosInstalaciones> GetAdeudosInstalaciones(Nullable<System.Guid> id, Nullable<System.Guid> idCliente, Nullable<int> opcion, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(System.Guid));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AdeudosInstalaciones>("GetAdeudosInstalaciones", mergeOption, idParameter, idClienteParameter, opcionParameter);
        }
    
        public virtual int InsertAdeudosInstalacion(Nullable<System.Guid> id, Nullable<System.Guid> idProveedor, Nullable<System.Guid> idCliente, Nullable<System.DateTime> fechaContrato, Nullable<bool> pagoComision, Nullable<System.Guid> idAcesor, Nullable<System.Guid> idPaquete, Nullable<System.Guid> idMensualidad, Nullable<int> cantidad, string concepto, string descripcion, string unidad, Nullable<double> total, string claveProdServ, Nullable<System.DateTime> fechaInstalacion, Nullable<System.Guid> idInstalador, string comentarios, Nullable<double> anticipo, Nullable<bool> pagado, Nullable<bool> instalacion, Nullable<bool> requiereFacturacion, Nullable<bool> requiereCancelacion, Nullable<bool> requiereEnvio, Nullable<bool> revisoRobot, Nullable<System.DateTime> fechaCreacion, Nullable<System.Guid> usuarioCreacion, Nullable<bool> activo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(System.Guid));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(System.Guid));
    
            var fechaContratoParameter = fechaContrato.HasValue ?
                new ObjectParameter("FechaContrato", fechaContrato) :
                new ObjectParameter("FechaContrato", typeof(System.DateTime));
    
            var pagoComisionParameter = pagoComision.HasValue ?
                new ObjectParameter("PagoComision", pagoComision) :
                new ObjectParameter("PagoComision", typeof(bool));
    
            var idAcesorParameter = idAcesor.HasValue ?
                new ObjectParameter("IdAcesor", idAcesor) :
                new ObjectParameter("IdAcesor", typeof(System.Guid));
    
            var idPaqueteParameter = idPaquete.HasValue ?
                new ObjectParameter("IdPaquete", idPaquete) :
                new ObjectParameter("IdPaquete", typeof(System.Guid));
    
            var idMensualidadParameter = idMensualidad.HasValue ?
                new ObjectParameter("IdMensualidad", idMensualidad) :
                new ObjectParameter("IdMensualidad", typeof(System.Guid));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(int));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("Concepto", concepto) :
                new ObjectParameter("Concepto", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var unidadParameter = unidad != null ?
                new ObjectParameter("Unidad", unidad) :
                new ObjectParameter("Unidad", typeof(string));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(double));
    
            var claveProdServParameter = claveProdServ != null ?
                new ObjectParameter("ClaveProdServ", claveProdServ) :
                new ObjectParameter("ClaveProdServ", typeof(string));
    
            var fechaInstalacionParameter = fechaInstalacion.HasValue ?
                new ObjectParameter("FechaInstalacion", fechaInstalacion) :
                new ObjectParameter("FechaInstalacion", typeof(System.DateTime));
    
            var idInstaladorParameter = idInstalador.HasValue ?
                new ObjectParameter("IdInstalador", idInstalador) :
                new ObjectParameter("IdInstalador", typeof(System.Guid));
    
            var comentariosParameter = comentarios != null ?
                new ObjectParameter("Comentarios", comentarios) :
                new ObjectParameter("Comentarios", typeof(string));
    
            var anticipoParameter = anticipo.HasValue ?
                new ObjectParameter("Anticipo", anticipo) :
                new ObjectParameter("Anticipo", typeof(double));
    
            var pagadoParameter = pagado.HasValue ?
                new ObjectParameter("Pagado", pagado) :
                new ObjectParameter("Pagado", typeof(bool));
    
            var instalacionParameter = instalacion.HasValue ?
                new ObjectParameter("Instalacion", instalacion) :
                new ObjectParameter("Instalacion", typeof(bool));
    
            var requiereFacturacionParameter = requiereFacturacion.HasValue ?
                new ObjectParameter("RequiereFacturacion", requiereFacturacion) :
                new ObjectParameter("RequiereFacturacion", typeof(bool));
    
            var requiereCancelacionParameter = requiereCancelacion.HasValue ?
                new ObjectParameter("RequiereCancelacion", requiereCancelacion) :
                new ObjectParameter("RequiereCancelacion", typeof(bool));
    
            var requiereEnvioParameter = requiereEnvio.HasValue ?
                new ObjectParameter("RequiereEnvio", requiereEnvio) :
                new ObjectParameter("RequiereEnvio", typeof(bool));
    
            var revisoRobotParameter = revisoRobot.HasValue ?
                new ObjectParameter("RevisoRobot", revisoRobot) :
                new ObjectParameter("RevisoRobot", typeof(bool));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(System.Guid));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertAdeudosInstalacion", idParameter, idProveedorParameter, idClienteParameter, fechaContratoParameter, pagoComisionParameter, idAcesorParameter, idPaqueteParameter, idMensualidadParameter, cantidadParameter, conceptoParameter, descripcionParameter, unidadParameter, totalParameter, claveProdServParameter, fechaInstalacionParameter, idInstaladorParameter, comentariosParameter, anticipoParameter, pagadoParameter, instalacionParameter, requiereFacturacionParameter, requiereCancelacionParameter, requiereEnvioParameter, revisoRobotParameter, fechaCreacionParameter, usuarioCreacionParameter, activoParameter);
        }
    
        public virtual ObjectResult<Empleados> GetEmpleados(Nullable<int> op, Nullable<System.Guid> id)
        {
            var opParameter = op.HasValue ?
                new ObjectParameter("op", op) :
                new ObjectParameter("op", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Empleados>("GetEmpleados", opParameter, idParameter);
        }
    
        public virtual ObjectResult<Empleados> GetEmpleados(Nullable<int> op, Nullable<System.Guid> id, MergeOption mergeOption)
        {
            var opParameter = op.HasValue ?
                new ObjectParameter("op", op) :
                new ObjectParameter("op", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Empleados>("GetEmpleados", mergeOption, opParameter, idParameter);
        }
    
        public virtual ObjectResult<Sensores> GetSensores(Nullable<System.Guid> id, Nullable<int> opcion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sensores>("GetSensores", idParameter, opcionParameter);
        }
    
        public virtual ObjectResult<Sensores> GetSensores(Nullable<System.Guid> id, Nullable<int> opcion, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sensores>("GetSensores", mergeOption, idParameter, opcionParameter);
        }
    
        public virtual ObjectResult<GetInventario_Result> GetInventario()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInventario_Result>("GetInventario");
        }
    
        public virtual ObjectResult<ClaveProdServ> GetClaveProdServPorPAC(Nullable<System.Guid> idPAC)
        {
            var idPACParameter = idPAC.HasValue ?
                new ObjectParameter("IdPAC", idPAC) :
                new ObjectParameter("IdPAC", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClaveProdServ>("GetClaveProdServPorPAC", idPACParameter);
        }
    
        public virtual ObjectResult<ClaveProdServ> GetClaveProdServPorPAC(Nullable<System.Guid> idPAC, MergeOption mergeOption)
        {
            var idPACParameter = idPAC.HasValue ?
                new ObjectParameter("IdPAC", idPAC) :
                new ObjectParameter("IdPAC", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClaveProdServ>("GetClaveProdServPorPAC", mergeOption, idPACParameter);
        }
    
        public virtual ObjectResult<GetEmpleadosByPuesto_Result> GetEmpleadosByPuesto(string puesto)
        {
            var puestoParameter = puesto != null ?
                new ObjectParameter("Puesto", puesto) :
                new ObjectParameter("Puesto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmpleadosByPuesto_Result>("GetEmpleadosByPuesto", puestoParameter);
        }
    
        public virtual ObjectResult<HorarioOperaciones> GetHorarioOperaciones(Nullable<System.Guid> idCliente)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HorarioOperaciones>("GetHorarioOperaciones", idClienteParameter);
        }
    
        public virtual ObjectResult<HorarioOperaciones> GetHorarioOperaciones(Nullable<System.Guid> idCliente, MergeOption mergeOption)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HorarioOperaciones>("GetHorarioOperaciones", mergeOption, idClienteParameter);
        }
    
        public virtual int InsertHorarioOperaciones(Nullable<System.Guid> id, Nullable<System.Guid> idCliente, Nullable<System.TimeSpan> domingoInicio, Nullable<System.TimeSpan> domingoFinal, Nullable<System.TimeSpan> lunesInicio, Nullable<System.TimeSpan> lunesFinal, Nullable<System.TimeSpan> martesInicio, Nullable<System.TimeSpan> martesFinal, Nullable<System.TimeSpan> miercolesInicio, Nullable<System.TimeSpan> miercolesFinal, Nullable<System.TimeSpan> juevesInicio, Nullable<System.TimeSpan> juevesFinal, Nullable<System.TimeSpan> viernesInicio, Nullable<System.TimeSpan> viernesFinal, Nullable<System.TimeSpan> sabadoInicio, Nullable<System.TimeSpan> sabadoFinal, Nullable<bool> active, Nullable<System.DateTime> fechaCreacion, Nullable<System.Guid> usuarioCreacion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(System.Guid));
    
            var domingoInicioParameter = domingoInicio.HasValue ?
                new ObjectParameter("DomingoInicio", domingoInicio) :
                new ObjectParameter("DomingoInicio", typeof(System.TimeSpan));
    
            var domingoFinalParameter = domingoFinal.HasValue ?
                new ObjectParameter("DomingoFinal", domingoFinal) :
                new ObjectParameter("DomingoFinal", typeof(System.TimeSpan));
    
            var lunesInicioParameter = lunesInicio.HasValue ?
                new ObjectParameter("LunesInicio", lunesInicio) :
                new ObjectParameter("LunesInicio", typeof(System.TimeSpan));
    
            var lunesFinalParameter = lunesFinal.HasValue ?
                new ObjectParameter("LunesFinal", lunesFinal) :
                new ObjectParameter("LunesFinal", typeof(System.TimeSpan));
    
            var martesInicioParameter = martesInicio.HasValue ?
                new ObjectParameter("MartesInicio", martesInicio) :
                new ObjectParameter("MartesInicio", typeof(System.TimeSpan));
    
            var martesFinalParameter = martesFinal.HasValue ?
                new ObjectParameter("MartesFinal", martesFinal) :
                new ObjectParameter("MartesFinal", typeof(System.TimeSpan));
    
            var miercolesInicioParameter = miercolesInicio.HasValue ?
                new ObjectParameter("MiercolesInicio", miercolesInicio) :
                new ObjectParameter("MiercolesInicio", typeof(System.TimeSpan));
    
            var miercolesFinalParameter = miercolesFinal.HasValue ?
                new ObjectParameter("MiercolesFinal", miercolesFinal) :
                new ObjectParameter("MiercolesFinal", typeof(System.TimeSpan));
    
            var juevesInicioParameter = juevesInicio.HasValue ?
                new ObjectParameter("JuevesInicio", juevesInicio) :
                new ObjectParameter("JuevesInicio", typeof(System.TimeSpan));
    
            var juevesFinalParameter = juevesFinal.HasValue ?
                new ObjectParameter("JuevesFinal", juevesFinal) :
                new ObjectParameter("JuevesFinal", typeof(System.TimeSpan));
    
            var viernesInicioParameter = viernesInicio.HasValue ?
                new ObjectParameter("ViernesInicio", viernesInicio) :
                new ObjectParameter("ViernesInicio", typeof(System.TimeSpan));
    
            var viernesFinalParameter = viernesFinal.HasValue ?
                new ObjectParameter("ViernesFinal", viernesFinal) :
                new ObjectParameter("ViernesFinal", typeof(System.TimeSpan));
    
            var sabadoInicioParameter = sabadoInicio.HasValue ?
                new ObjectParameter("SabadoInicio", sabadoInicio) :
                new ObjectParameter("SabadoInicio", typeof(System.TimeSpan));
    
            var sabadoFinalParameter = sabadoFinal.HasValue ?
                new ObjectParameter("SabadoFinal", sabadoFinal) :
                new ObjectParameter("SabadoFinal", typeof(System.TimeSpan));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertHorarioOperaciones", idParameter, idClienteParameter, domingoInicioParameter, domingoFinalParameter, lunesInicioParameter, lunesFinalParameter, martesInicioParameter, martesFinalParameter, miercolesInicioParameter, miercolesFinalParameter, juevesInicioParameter, juevesFinalParameter, viernesInicioParameter, viernesFinalParameter, sabadoInicioParameter, sabadoFinalParameter, activeParameter, fechaCreacionParameter, usuarioCreacionParameter);
        }
    
        public virtual int UpdateHorarioOperaciones(Nullable<System.Guid> id, Nullable<System.Guid> idCliente, Nullable<System.TimeSpan> domingoInicio, Nullable<System.TimeSpan> domingoFinal, Nullable<System.TimeSpan> lunesInicio, Nullable<System.TimeSpan> lunesFinal, Nullable<System.TimeSpan> martesInicio, Nullable<System.TimeSpan> martesFinal, Nullable<System.TimeSpan> miercolesInicio, Nullable<System.TimeSpan> miercolesFinal, Nullable<System.TimeSpan> juevesInicio, Nullable<System.TimeSpan> juevesFinal, Nullable<System.TimeSpan> viernesInicio, Nullable<System.TimeSpan> viernesFinal, Nullable<System.TimeSpan> sabadoInicio, Nullable<System.TimeSpan> sabadoFinal)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(System.Guid));
    
            var domingoInicioParameter = domingoInicio.HasValue ?
                new ObjectParameter("DomingoInicio", domingoInicio) :
                new ObjectParameter("DomingoInicio", typeof(System.TimeSpan));
    
            var domingoFinalParameter = domingoFinal.HasValue ?
                new ObjectParameter("DomingoFinal", domingoFinal) :
                new ObjectParameter("DomingoFinal", typeof(System.TimeSpan));
    
            var lunesInicioParameter = lunesInicio.HasValue ?
                new ObjectParameter("LunesInicio", lunesInicio) :
                new ObjectParameter("LunesInicio", typeof(System.TimeSpan));
    
            var lunesFinalParameter = lunesFinal.HasValue ?
                new ObjectParameter("LunesFinal", lunesFinal) :
                new ObjectParameter("LunesFinal", typeof(System.TimeSpan));
    
            var martesInicioParameter = martesInicio.HasValue ?
                new ObjectParameter("MartesInicio", martesInicio) :
                new ObjectParameter("MartesInicio", typeof(System.TimeSpan));
    
            var martesFinalParameter = martesFinal.HasValue ?
                new ObjectParameter("MartesFinal", martesFinal) :
                new ObjectParameter("MartesFinal", typeof(System.TimeSpan));
    
            var miercolesInicioParameter = miercolesInicio.HasValue ?
                new ObjectParameter("MiercolesInicio", miercolesInicio) :
                new ObjectParameter("MiercolesInicio", typeof(System.TimeSpan));
    
            var miercolesFinalParameter = miercolesFinal.HasValue ?
                new ObjectParameter("MiercolesFinal", miercolesFinal) :
                new ObjectParameter("MiercolesFinal", typeof(System.TimeSpan));
    
            var juevesInicioParameter = juevesInicio.HasValue ?
                new ObjectParameter("JuevesInicio", juevesInicio) :
                new ObjectParameter("JuevesInicio", typeof(System.TimeSpan));
    
            var juevesFinalParameter = juevesFinal.HasValue ?
                new ObjectParameter("JuevesFinal", juevesFinal) :
                new ObjectParameter("JuevesFinal", typeof(System.TimeSpan));
    
            var viernesInicioParameter = viernesInicio.HasValue ?
                new ObjectParameter("ViernesInicio", viernesInicio) :
                new ObjectParameter("ViernesInicio", typeof(System.TimeSpan));
    
            var viernesFinalParameter = viernesFinal.HasValue ?
                new ObjectParameter("ViernesFinal", viernesFinal) :
                new ObjectParameter("ViernesFinal", typeof(System.TimeSpan));
    
            var sabadoInicioParameter = sabadoInicio.HasValue ?
                new ObjectParameter("SabadoInicio", sabadoInicio) :
                new ObjectParameter("SabadoInicio", typeof(System.TimeSpan));
    
            var sabadoFinalParameter = sabadoFinal.HasValue ?
                new ObjectParameter("SabadoFinal", sabadoFinal) :
                new ObjectParameter("SabadoFinal", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateHorarioOperaciones", idParameter, idClienteParameter, domingoInicioParameter, domingoFinalParameter, lunesInicioParameter, lunesFinalParameter, martesInicioParameter, martesFinalParameter, miercolesInicioParameter, miercolesFinalParameter, juevesInicioParameter, juevesFinalParameter, viernesInicioParameter, viernesFinalParameter, sabadoInicioParameter, sabadoFinalParameter);
        }
    
        public virtual int UpdateClientes(Nullable<System.Guid> idCliente, Nullable<System.Guid> idProveedor, string numeroDeCuenta, string numeroTelefonoAlarma, string palabraClave, string palabraClaveSilenciosa, string nombres, string apellidoPaterno, string apellidoMaterno, string calle, string noInterior, string noExterior, string colonia, string codigoPostal, string referencias, string colorEstablecimiento, string entreCalles, string googleMaps, string descripcion, string telefono, string telefonoTrabajo, string telefonoCelular, string email, string foto, string estado, string pais, string ciudad, Nullable<System.Guid> tipoAfilacion, string numeroPatrocinador, string fechaNacimiento, string lugarNacimiento, string sexo, string estadoCivil, string profesion, string cURP, string rFC, string numCtaPago, string claveBancaria, string banco, string numeroCLABE, string beneficiario, Nullable<System.DateTime> fechaCreacion, Nullable<System.Guid> usuarioCreacion, Nullable<bool> activo, Nullable<System.Guid> usuario)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(System.Guid));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(System.Guid));
    
            var numeroDeCuentaParameter = numeroDeCuenta != null ?
                new ObjectParameter("NumeroDeCuenta", numeroDeCuenta) :
                new ObjectParameter("NumeroDeCuenta", typeof(string));
    
            var numeroTelefonoAlarmaParameter = numeroTelefonoAlarma != null ?
                new ObjectParameter("NumeroTelefonoAlarma", numeroTelefonoAlarma) :
                new ObjectParameter("NumeroTelefonoAlarma", typeof(string));
    
            var palabraClaveParameter = palabraClave != null ?
                new ObjectParameter("PalabraClave", palabraClave) :
                new ObjectParameter("PalabraClave", typeof(string));
    
            var palabraClaveSilenciosaParameter = palabraClaveSilenciosa != null ?
                new ObjectParameter("PalabraClaveSilenciosa", palabraClaveSilenciosa) :
                new ObjectParameter("PalabraClaveSilenciosa", typeof(string));
    
            var nombresParameter = nombres != null ?
                new ObjectParameter("Nombres", nombres) :
                new ObjectParameter("Nombres", typeof(string));
    
            var apellidoPaternoParameter = apellidoPaterno != null ?
                new ObjectParameter("ApellidoPaterno", apellidoPaterno) :
                new ObjectParameter("ApellidoPaterno", typeof(string));
    
            var apellidoMaternoParameter = apellidoMaterno != null ?
                new ObjectParameter("ApellidoMaterno", apellidoMaterno) :
                new ObjectParameter("ApellidoMaterno", typeof(string));
    
            var calleParameter = calle != null ?
                new ObjectParameter("Calle", calle) :
                new ObjectParameter("Calle", typeof(string));
    
            var noInteriorParameter = noInterior != null ?
                new ObjectParameter("NoInterior", noInterior) :
                new ObjectParameter("NoInterior", typeof(string));
    
            var noExteriorParameter = noExterior != null ?
                new ObjectParameter("NoExterior", noExterior) :
                new ObjectParameter("NoExterior", typeof(string));
    
            var coloniaParameter = colonia != null ?
                new ObjectParameter("Colonia", colonia) :
                new ObjectParameter("Colonia", typeof(string));
    
            var codigoPostalParameter = codigoPostal != null ?
                new ObjectParameter("CodigoPostal", codigoPostal) :
                new ObjectParameter("CodigoPostal", typeof(string));
    
            var referenciasParameter = referencias != null ?
                new ObjectParameter("Referencias", referencias) :
                new ObjectParameter("Referencias", typeof(string));
    
            var colorEstablecimientoParameter = colorEstablecimiento != null ?
                new ObjectParameter("ColorEstablecimiento", colorEstablecimiento) :
                new ObjectParameter("ColorEstablecimiento", typeof(string));
    
            var entreCallesParameter = entreCalles != null ?
                new ObjectParameter("entreCalles", entreCalles) :
                new ObjectParameter("entreCalles", typeof(string));
    
            var googleMapsParameter = googleMaps != null ?
                new ObjectParameter("GoogleMaps", googleMaps) :
                new ObjectParameter("GoogleMaps", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var telefonoTrabajoParameter = telefonoTrabajo != null ?
                new ObjectParameter("TelefonoTrabajo", telefonoTrabajo) :
                new ObjectParameter("TelefonoTrabajo", typeof(string));
    
            var telefonoCelularParameter = telefonoCelular != null ?
                new ObjectParameter("TelefonoCelular", telefonoCelular) :
                new ObjectParameter("TelefonoCelular", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var fotoParameter = foto != null ?
                new ObjectParameter("Foto", foto) :
                new ObjectParameter("Foto", typeof(string));
    
            var estadoParameter = estado != null ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(string));
    
            var paisParameter = pais != null ?
                new ObjectParameter("Pais", pais) :
                new ObjectParameter("Pais", typeof(string));
    
            var ciudadParameter = ciudad != null ?
                new ObjectParameter("Ciudad", ciudad) :
                new ObjectParameter("Ciudad", typeof(string));
    
            var tipoAfilacionParameter = tipoAfilacion.HasValue ?
                new ObjectParameter("TipoAfilacion", tipoAfilacion) :
                new ObjectParameter("TipoAfilacion", typeof(System.Guid));
    
            var numeroPatrocinadorParameter = numeroPatrocinador != null ?
                new ObjectParameter("NumeroPatrocinador", numeroPatrocinador) :
                new ObjectParameter("NumeroPatrocinador", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento != null ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(string));
    
            var lugarNacimientoParameter = lugarNacimiento != null ?
                new ObjectParameter("LugarNacimiento", lugarNacimiento) :
                new ObjectParameter("LugarNacimiento", typeof(string));
    
            var sexoParameter = sexo != null ?
                new ObjectParameter("Sexo", sexo) :
                new ObjectParameter("Sexo", typeof(string));
    
            var estadoCivilParameter = estadoCivil != null ?
                new ObjectParameter("EstadoCivil", estadoCivil) :
                new ObjectParameter("EstadoCivil", typeof(string));
    
            var profesionParameter = profesion != null ?
                new ObjectParameter("Profesion", profesion) :
                new ObjectParameter("Profesion", typeof(string));
    
            var cURPParameter = cURP != null ?
                new ObjectParameter("CURP", cURP) :
                new ObjectParameter("CURP", typeof(string));
    
            var rFCParameter = rFC != null ?
                new ObjectParameter("RFC", rFC) :
                new ObjectParameter("RFC", typeof(string));
    
            var numCtaPagoParameter = numCtaPago != null ?
                new ObjectParameter("NumCtaPago", numCtaPago) :
                new ObjectParameter("NumCtaPago", typeof(string));
    
            var claveBancariaParameter = claveBancaria != null ?
                new ObjectParameter("ClaveBancaria", claveBancaria) :
                new ObjectParameter("ClaveBancaria", typeof(string));
    
            var bancoParameter = banco != null ?
                new ObjectParameter("Banco", banco) :
                new ObjectParameter("Banco", typeof(string));
    
            var numeroCLABEParameter = numeroCLABE != null ?
                new ObjectParameter("NumeroCLABE", numeroCLABE) :
                new ObjectParameter("NumeroCLABE", typeof(string));
    
            var beneficiarioParameter = beneficiario != null ?
                new ObjectParameter("Beneficiario", beneficiario) :
                new ObjectParameter("Beneficiario", typeof(string));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(System.Guid));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var usuarioParameter = usuario.HasValue ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateClientes", idClienteParameter, idProveedorParameter, numeroDeCuentaParameter, numeroTelefonoAlarmaParameter, palabraClaveParameter, palabraClaveSilenciosaParameter, nombresParameter, apellidoPaternoParameter, apellidoMaternoParameter, calleParameter, noInteriorParameter, noExteriorParameter, coloniaParameter, codigoPostalParameter, referenciasParameter, colorEstablecimientoParameter, entreCallesParameter, googleMapsParameter, descripcionParameter, telefonoParameter, telefonoTrabajoParameter, telefonoCelularParameter, emailParameter, fotoParameter, estadoParameter, paisParameter, ciudadParameter, tipoAfilacionParameter, numeroPatrocinadorParameter, fechaNacimientoParameter, lugarNacimientoParameter, sexoParameter, estadoCivilParameter, profesionParameter, cURPParameter, rFCParameter, numCtaPagoParameter, claveBancariaParameter, bancoParameter, numeroCLABEParameter, beneficiarioParameter, fechaCreacionParameter, usuarioCreacionParameter, activoParameter, usuarioParameter);
        }
    
        public virtual int InsertIncidentes(Nullable<System.Guid> id, Nullable<System.Guid> idCliente, Nullable<System.Guid> idLog, string comentarios, Nullable<System.DateTime> fechaHoraInicio, Nullable<System.DateTime> fechaHoraFin, string estatus, Nullable<bool> activo, Nullable<System.DateTime> fechaCreacion, Nullable<System.Guid> usuarioCreacion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(System.Guid));
    
            var idLogParameter = idLog.HasValue ?
                new ObjectParameter("IdLog", idLog) :
                new ObjectParameter("IdLog", typeof(System.Guid));
    
            var comentariosParameter = comentarios != null ?
                new ObjectParameter("Comentarios", comentarios) :
                new ObjectParameter("Comentarios", typeof(string));
    
            var fechaHoraInicioParameter = fechaHoraInicio.HasValue ?
                new ObjectParameter("FechaHoraInicio", fechaHoraInicio) :
                new ObjectParameter("FechaHoraInicio", typeof(System.DateTime));
    
            var fechaHoraFinParameter = fechaHoraFin.HasValue ?
                new ObjectParameter("FechaHoraFin", fechaHoraFin) :
                new ObjectParameter("FechaHoraFin", typeof(System.DateTime));
    
            var estatusParameter = estatus != null ?
                new ObjectParameter("Estatus", estatus) :
                new ObjectParameter("Estatus", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertIncidentes", idParameter, idClienteParameter, idLogParameter, comentariosParameter, fechaHoraInicioParameter, fechaHoraFinParameter, estatusParameter, activoParameter, fechaCreacionParameter, usuarioCreacionParameter);
        }
    
        public virtual int UpdateIncidente(Nullable<System.Guid> id, Nullable<System.Guid> idCliente, Nullable<System.Guid> idLog, string comentarios, Nullable<System.DateTime> fechaHoraInicio, Nullable<System.DateTime> fechaHoraFin, string estatus, Nullable<bool> activo, Nullable<System.DateTime> fechaCreacion, Nullable<System.Guid> usuarioCreacion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(System.Guid));
    
            var idLogParameter = idLog.HasValue ?
                new ObjectParameter("IdLog", idLog) :
                new ObjectParameter("IdLog", typeof(System.Guid));
    
            var comentariosParameter = comentarios != null ?
                new ObjectParameter("Comentarios", comentarios) :
                new ObjectParameter("Comentarios", typeof(string));
    
            var fechaHoraInicioParameter = fechaHoraInicio.HasValue ?
                new ObjectParameter("FechaHoraInicio", fechaHoraInicio) :
                new ObjectParameter("FechaHoraInicio", typeof(System.DateTime));
    
            var fechaHoraFinParameter = fechaHoraFin.HasValue ?
                new ObjectParameter("FechaHoraFin", fechaHoraFin) :
                new ObjectParameter("FechaHoraFin", typeof(System.DateTime));
    
            var estatusParameter = estatus != null ?
                new ObjectParameter("Estatus", estatus) :
                new ObjectParameter("Estatus", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var fechaCreacionParameter = fechaCreacion.HasValue ?
                new ObjectParameter("FechaCreacion", fechaCreacion) :
                new ObjectParameter("FechaCreacion", typeof(System.DateTime));
    
            var usuarioCreacionParameter = usuarioCreacion.HasValue ?
                new ObjectParameter("UsuarioCreacion", usuarioCreacion) :
                new ObjectParameter("UsuarioCreacion", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateIncidente", idParameter, idClienteParameter, idLogParameter, comentariosParameter, fechaHoraInicioParameter, fechaHoraFinParameter, estatusParameter, activoParameter, fechaCreacionParameter, usuarioCreacionParameter);
        }
    
        public virtual ObjectResult<NominaHistorial> GetNominaHistorial(Nullable<int> opcion, Nullable<System.Guid> id)
        {
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NominaHistorial>("GetNominaHistorial", opcionParameter, idParameter);
        }
    
        public virtual ObjectResult<NominaHistorial> GetNominaHistorial(Nullable<int> opcion, Nullable<System.Guid> id, MergeOption mergeOption)
        {
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NominaHistorial>("GetNominaHistorial", mergeOption, opcionParameter, idParameter);
        }
    }
}
